<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>罗小帅的blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-12-08T15:20:36.625Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>LuoDashuai</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2024-12-08写给自己</title>
    <link href="http://example.com/2024/12/08/2024-12-08%E5%86%99%E7%BB%99%E8%87%AA%E5%B7%B1/"/>
    <id>http://example.com/2024/12/08/2024-12-08%E5%86%99%E7%BB%99%E8%87%AA%E5%B7%B1/</id>
    <published>2024-12-08T15:04:21.000Z</published>
    <updated>2024-12-08T15:20:36.625Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><h2 id="记录一下"><a href="#记录一下" class="headerlink" title="记录一下"></a>记录一下</h2><pre><code>现在是2024-12-08电脑正好没连上网写点东西吧今天听歌突然看见一句话My girlfriend is like Google.我的“女朋友”像是谷歌一样因为它知道所以事情吗？不是，因为我想要找的，在它身上都有。太甜了我也在这段人生中可以与高考媲美的日子里我也有遇到这样的谷歌女孩你好哇 xxx（学王小波）：“你劝我的话我记住了。我将来一定把我的本心拿给你看。为什么是将来呢？阿，将来的我比现在好，这一点我已经有了把握”祝你这一天过的顺利快考试了，我也在努力朝着我想要的哪个目标前进着也祝我顺利吧加油罗大帅o.O</code></pre><hr><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1968700248&auto=1&height=66"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;http://xxx/aplayer.min.css&quot;&gt;&lt;script src=&quot;http://xxx/aplayer.min.js&quot; clas</summary>
      
    
    
    
    <category term="小纸条" scheme="http://example.com/categories/%E5%B0%8F%E7%BA%B8%E6%9D%A1/"/>
    
    <category term="EMO" scheme="http://example.com/categories/%E5%B0%8F%E7%BA%B8%E6%9D%A1/EMO/"/>
    
    
    <category term="小心思" scheme="http://example.com/tags/%E5%B0%8F%E5%BF%83%E6%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>Java入门笔记</title>
    <link href="http://example.com/2024/04/16/Java%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2024/04/16/Java%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</id>
    <published>2024-04-16T15:34:25.000Z</published>
    <updated>2024-04-16T15:39:35.051Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><h3 id="Java学习路线"><a href="#Java学习路线" class="headerlink" title="Java学习路线"></a>Java学习路线</h3><p><strong>阶段①:Java入门，培养兴趣</strong><br>>在线写代码:菜鸟工具<br>>记笔记:typora+markdown语法（可导HTML）<br>>多写代码，少背代码<br>>找资料小技巧:评论区，新视频</p><p><Java知识><br>基础语法，面向<img src="https://i0.hdslb.com/bfs/emote/a41763740a90c2b11bf282bf44ccee78066c98ff.png@112w_112h.webp" alt="[热词系列_对象]">。<br>（课程推荐韩顺平老师的0基础30天入门Java）<br>Java8（宋红康老师的Java8入门视频）<br><strong>阶段②:巩固基础【1星期】</strong><br>《Java核心技术卷1》<br>牛客网刷题<br>数据结构算法练习（leetbook）<br>计算机网络<br>计算机基础<br>操作系统<br>（先看些有趣的书籍，当成课外书）<br><strong>阶段③:Java企业开发基础</strong><br>数据库入门（7天，老杜MySQL入门视频，SQL自学网）<br>学习开发框架（Java web——&gt;spring5，spring mvc，mybatis，springboot框架——&gt;同一家视频教程&gt;尚硅谷老师）<br>开发规范（保命用——&gt;阿里巴巴Java开发手册）<br>git，github（《GitHub漫游指南》）<br>Linux服务器（……）<br>前端基础（HTML，css，Java script，vue）<br><strong>阶段④:Java企业开发进阶</strong><br>设计模式（……）<br>中间件<br>（Redis缓存，RebbitMQ消息对列，nginx网关）<br>netty网络编程<br>微服务（springcloud，springcloud alibaba）<br>接口管理（尚硅谷老师的视频）<br>容器技术（docker，K8S，狂神老师的教程）<br>ci/cd（狂神老师）<br><strong>阶段⑤:项目实战</strong><br>【干货资源】<br><strong>阶段⑥:Java高级知识</strong><br>并发编程（尚硅谷老师的教程）<br>jvm Java虚拟机（重点，尚硅谷老师，宋老师，狂神老师等）<br>架构设计<br><strong>阶段⑦:Java求职</strong><br>>尽早规划<br>>雕琢简历<br>>多读面经<br>>多参与面试<br>>持续复盘总结<br>【干货资源】<br><strong>阶段⑧:持续学习</strong><br>深入学习源码，了解底层原理，更多数据库中间键分布式技术，面相业务的解决方案，提升架构能力，大数据【干货资源】<br>已<img src="https://i0.hdslb.com/bfs/emote/21f15fe11b7a84d2f2121c16dec50a4e4556f865.png@112w_112h.webp" alt="[热词系列_三连]">，整个文档在鱼皮老哥的公众号里面可以获取，纯干货，值得！<br>公众号链接直达:<a href="https://mp.weixin.qq.com/s/nWC8e2GfvFq7W4MEdg-OPQ">https://mp.weixin.qq.com/s/nWC8e2GfvFq7W4MEdg-OPQ</a></Java知识></p><h1 id="跟着二哥学java"><a href="#跟着二哥学java" class="headerlink" title="跟着二哥学java"></a>跟着二哥学java</h1><h2 id="java基础"><a href="#java基础" class="headerlink" title="java基础"></a>java基础</h2><h3 id="java文件与-class文件的区别"><a href="#java文件与-class文件的区别" class="headerlink" title=".java文件与.class文件的区别"></a>.java文件与.class文件的区别</h3><ul><li>.java是源代码 开发人员能够看懂 可以编写的</li><li>.class是字节码文件 是通过javac编译后的文件 是交给JVM执行的文件</li></ul><h3 id="Java是编译型语言还是解释型语言"><a href="#Java是编译型语言还是解释型语言" class="headerlink" title="Java是编译型语言还是解释型语言"></a>Java是编译型语言还是解释型语言</h3><p>Java 的第一道工序是通过 javac 命令把 Java 源码编译成字节码。</p><p>之后，我们可以通过 java 命令运行字节码（比如说 <code>java Hello</code>），此时就有 2 种处理方式了</p><ul><li>字节码由 JVM 逐条解释执行。</li><li>部分字节码可能由 <a href="https://javabetter.cn/jvm/jit.html">JIT（即时编译，戳链接了解open in new window</a>）编译为机器指令直接执行。</li></ul><p><img src="/.com//桌面\学习资料\java面试\Source\hello-world-20230408190024.png" alt="hello-world-20230408190024"></p><h4 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a><a href="https://javabetter.cn/oo/final.html#_03、final-类">final关键字</a></h4><h5 id="final-变量"><a href="#final-变量" class="headerlink" title="final 变量"></a>final 变量</h5><p>被final修饰的变量<strong>无法重新赋值</strong></p><p><strong>final 和 static 一起修饰</strong>的成员变量叫做<strong>常量</strong>，常量名必须<strong>全部大写</strong>。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pig</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">PRICE</span> <span class="operator">=</span> <span class="number">36.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> final 关键字来修饰参数：意味着<strong>参数在方法体内不能被再修改</strong>。</p><h5 id="final-方法"><a href="#final-方法" class="headerlink" title="final 方法"></a>final 方法</h5><p>被 final 修饰的方法<strong>不能被重写</strong></p><h5 id="final-类"><a href="#final-类" class="headerlink" title="final 类"></a>final 类</h5><p>一个类使用了 final 关键字修饰，那么它就<strong>无法被继承</strong></p><p>特殊：String 类就是一个 final 类<a href="https://javabetter.cn/string/immutable.html">详细请看</a></p><ul><li>为了实现字符串常量池</li><li>为了线程安全</li><li>为了 HashCode 的不可变性</li></ul><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><h4 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h4><p>阿里开发规约：单行注释不在行尾使用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>; <span class="comment">// age 用于表示年龄</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//nonono！</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// age 用于表示年龄</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ok！</span></span><br></pre></td></tr></table></figure><h4 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">age 用于表示年纪</span></span><br><span class="line"><span class="comment">name 用于表示姓名</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;沉默王二&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h4><p>PS：在 Intellij IDEA 中，按下 <code>/**</code> 后敲下回车键就可以自动添加文档注释的格式，<code>*/</code> 是自动补全的。</p><h6 id="javadoc的创建"><a href="#javadoc的创建" class="headerlink" title="javadoc的创建"></a>javadoc的创建</h6><p>执行 javadoc 命令 <code>javadoc Demo.java -encoding utf-8</code>。<code>-encoding utf-8</code> 可以保证中文不发生乱码。</p><p>文档注释的注意事项</p><ol><li><p><code>javadoc</code> 命令只能为 public 和 protected 修饰的字段、方法和类生成文档。</p><p>default 和 private 修饰的字段和方法的注释将会被忽略掉。因为我们本来就不希望这些字段和方法暴露给调用者。</p><p>如果类不是 public 的话，javadoc 会执行失败。</p></li><li><p>文档注释中可以嵌入一些 HTML 标记，比如说段落标记 <code>&lt;p&gt;</code>，超链接标记 <code>&lt;a&gt;&lt;/a&gt;</code> 等等，但不要使用标题标记，比如说 <code>&lt;h1&gt;</code>，因为 javadoc 会插入自己的标题，容易发生冲突。</p></li><li><p>文档注释中可以插入一些 <code>@</code> 注解，比如说 <code>@see</code> 引用其他类，<code>@version</code> 版本号，<code>@param</code> 参数标识符，<code>@author</code> 作者标识符，<code>@deprecated</code> 已废弃标识符，等等。</p></li></ol><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><ul><li>1、变量名指向具体的数值。</li><li>2、基本数据类型存储在栈上。</li></ul><h4 id="引用数据类型（String-Array-List接口-）"><a href="#引用数据类型（String-Array-List接口-）" class="headerlink" title="引用数据类型（String Array List接口 ）"></a>引用数据类型（String Array List接口 ）</h4><ul><li>1、变量名指向的是存储对象的内存地址，在栈上。</li><li>2、内存地址指向的对象存储在堆上。[]</li></ul><h4 id="栈和堆"><a href="#栈和堆" class="headerlink" title="栈和堆"></a><a href="https://www.zhihu.com/question/19729973/answer/2238950166">栈和堆</a></h4><p>堆是在<strong>程序运行时</strong>在<strong>内存中申请的空间</strong>（可理解为动态的过程）；切记，不是在编译时；因此，Java 中的对象就放在这里，这样做的好处就是：</p><blockquote><p>当需要一个对象时，只需要通过 new 关键字写一行代码即可，当执行这行代码时，会自动在内存的“堆”区分配空间——这样就很灵活。</p></blockquote><p>栈，能够和处理器（CPU，也就是脑子）直接关联，因此访问速度更快。既然访问速度快，要好好利用啊！Java 就把对象的引用放在栈里。为什么呢？因为引用的使用频率高吗？</p><p>不是的，因为 Java 在编译程序时，必须明确的知道存储在栈里的东西的生命周期，否则就没法释放旧的内存来开辟新的内存空间存放引用——空间就那么大，前浪要把后浪拍死在沙滩上啊。</p><p>“Stack is designed for dealing with primitives”</p><p>栈是为处理原语而设计的</p><p>例子：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/.com//桌面\学习资料\java面试\Source\basic-data-type-3d5b3e40-1abb-4624-8282-b83e58388825.png" alt="basic-data-type-3d5b3e40-1abb-4624-8282-b83e58388825"></p><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><h4 id="自动类型转换（小转大）"><a href="#自动类型转换（小转大）" class="headerlink" title="自动类型转换（小转大）"></a>自动类型转换（小转大）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> <span class="variable">price1</span> <span class="operator">=</span> <span class="number">10.9f</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">price2</span> <span class="operator">=</span> <span class="number">5.8</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">res2</span> <span class="operator">=</span> (<span class="type">int</span>) (price1 * num1 + price2 * num2);</span><br><span class="line">System.out.println(<span class="string">&quot;一共付给收银员&quot;</span> + res2 + <span class="string">&quot;元&quot;</span>);</span><br><span class="line"><span class="comment">//一共付给收银员44元</span></span><br></pre></td></tr></table></figure><h4 id="强制类型转换（大转小）"><a href="#强制类型转换（大转小）" class="headerlink" title="强制类型转换（大转小）"></a>强制类型转换（大转小）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1500000000</span>, b = <span class="number">1500000000</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> a + b;</span><br><span class="line"><span class="type">long</span> <span class="variable">sum1</span> <span class="operator">=</span> a + b;</span><br><span class="line"><span class="type">long</span> <span class="variable">sum2</span> <span class="operator">=</span> (<span class="type">long</span>)a + b;</span><br><span class="line"><span class="type">long</span> <span class="variable">sum3</span> <span class="operator">=</span> (<span class="type">long</span>)(a + b);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">-1294967296</span></span><br><span class="line"><span class="comment">-1294967296</span></span><br><span class="line"><span class="comment">3000000000</span></span><br><span class="line"><span class="comment">-1294967296</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;http://xxx/aplayer.min.css&quot;&gt;&lt;script src=&quot;http://xxx/aplayer.min.js&quot; clas</summary>
      
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Java" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>LeedCode刷题笔记</title>
    <link href="http://example.com/2024/03/12/LeedCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8F%AF%E7%BC%96%E8%BE%91%EF%BC%89/"/>
    <id>http://example.com/2024/03/12/LeedCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8F%AF%E7%BC%96%E8%BE%91%EF%BC%89/</id>
    <published>2024-03-12T11:00:16.000Z</published>
    <updated>2024-03-26T03:01:52.817Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><h1 id="LeedCode刷题笔记"><a href="#LeedCode刷题笔记" class="headerlink" title="LeedCode刷题笔记"></a>LeedCode刷题笔记</h1><blockquote><p><a href="programmercarl.com">代码随想录</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h3><ul><li><h4 id="代码命名"><a href="#代码命名" class="headerlink" title="代码命名"></a>代码命名</h4></li><li><h4 id="水平留白（代码空格）"><a href="#水平留白（代码空格）" class="headerlink" title="水平留白（代码空格）"></a>水平留白（代码空格）</h4></li></ul><h3 id="算法性能分析"><a href="#算法性能分析" class="headerlink" title="算法性能分析"></a>算法性能分析</h3><h5 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h5><h5 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h5><h5 id="代码的内存消耗"><a href="#代码的内存消耗" class="headerlink" title="代码的内存消耗"></a>代码的内存消耗</h5><ul><li><p>时间复杂度</p><p><strong>时间复杂度是一个函数，它定性描述该算法的运行时间。</strong></p><h4 id="大O表示什么"><a href="#大O表示什么" class="headerlink" title="大O表示什么"></a>大O表示什么</h4><p>算法导论给出的解释：<strong>大O是用来表示上界的</strong></p><p><strong>大O就是数据量级突破一个点且数据量级非常大的情况下所表现出的时间复杂度，这个数据量也就是常数项系数已经不起决定性作用的数据量</strong>（为什么要忽略常数项）</p><h5 id="例子：递归算法的时间复杂度"><a href="#例子：递归算法的时间复杂度" class="headerlink" title="例子：递归算法的时间复杂度"></a>例子：递归算法的时间复杂度</h5><p>求x的n次方</p></li></ul><ul><li><p>空间复杂度</p></li><li><p>代码的内存消耗</p></li></ul><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h5 id="二分查找（704）"><a href="#二分查找（704）" class="headerlink" title="二分查找（704）"></a>二分查找（704）</h5><p>重点 <strong>区间的划分</strong></p><ul><li><p>若取左右闭包[left , right]（第一种写法）</p><p><strong>while(left &lt;= right)</strong></p><p>若nums[middle]&gt;target  则right = middle - 1</p><p>因为此时取左右闭包，若大于则middle一定不会是target，区间可以缩小为middle左边不含middle的区间</p></li><li><p>若取左闭又开[left , right) （第二种写法）</p><p><strong>while(left &lt; right)</strong> 此时取等无意义</p><p>若nums[middle]&gt;target  则right = middle</p><p>即下一次区间比较不会再比较此时的nums[middl]</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//此例子为左右闭包</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + ((right - left) / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//左闭右开</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target)</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target)</span><br><span class="line">                right = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="相关习题"><a href="#相关习题" class="headerlink" title="相关习题"></a>相关习题</h6><p><a href="https://leetcode.cn/problems/search-insert-position/">35. 搜索插入位置</a></p><p>​    在二分查找的基础上，要求找出target数若不存在数组中，该插入到什么位置</p><p>​    若为左右闭包二分查找，最后返回的插入索引位置为 <strong>right + 1</strong></p><p>题34.在排序数组中查找元素的第一个位置和最后一个位置</p><p>此算法并未满足时间复杂度为O(logn)的要求，时间复杂度为O(n)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//我的暴力解法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] searchRange(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]==target)</span><br><span class="line">            &#123;</span><br><span class="line">                end = i;</span><br><span class="line">                number++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(end&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;end - number + <span class="number">1</span>, end&#125;;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要满足相应时间复杂度，需要使用二分查找</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] searchRange(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftBorder</span> <span class="operator">=</span> getLeftBorder(nums, target);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightBorder</span> <span class="operator">=</span> getRightBorder(nums, target);</span><br><span class="line">        <span class="comment">// 情况一</span></span><br><span class="line">        <span class="keyword">if</span> (leftBorder == -<span class="number">2</span> || rightBorder == -<span class="number">2</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="comment">// 情况三</span></span><br><span class="line">        <span class="keyword">if</span> (rightBorder - leftBorder &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;leftBorder + <span class="number">1</span>, rightBorder - <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="comment">// 情况二</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getRightBorder</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightBorder</span> <span class="operator">=</span> -<span class="number">2</span>; <span class="comment">// 记录一下rightBorder没有被赋值的情况</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> left + ((right - left) / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &gt; target) &#123;</span><br><span class="line">                right = middle - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 寻找右边界，nums[middle] == target的时候更新left</span></span><br><span class="line">                left = middle + <span class="number">1</span>;</span><br><span class="line">                rightBorder = left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rightBorder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getLeftBorder</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftBorder</span> <span class="operator">=</span> -<span class="number">2</span>; <span class="comment">// 记录一下leftBorder没有被赋值的情况</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> left + ((right - left) / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &gt;= target) &#123; <span class="comment">// 寻找左边界，nums[middle] == target的时候更新right</span></span><br><span class="line">                right = middle - <span class="number">1</span>;</span><br><span class="line">                leftBorder = right;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = middle + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> leftBorder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/sqrtx/">69. x 的平方根 </a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">1</span>, right = x;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (mid == x / mid) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mid &lt; x / mid) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> right; <span class="comment">// 返回右边界，因为要返回整数部分</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Solution</span> <span class="variable">solution</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Solution</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">        System.out.println(solution.mySqrt(x)); <span class="comment">// 输出：2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>思路</strong>：二分查找1到x之间的数u，找出“mid = x/mid”的数，此数为x的近似平方根</p><h5 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h5><h5 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a><a href="https://leetcode.cn/problems/remove-element/">27. 移除元素</a></h5><h6 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h6><p>双指针法（快慢指针法）： <strong>通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。</strong></p><p>定义快慢指针</p><ul><li>快指针：寻找新数组的元素 ，新数组就是不含有目标元素的数组(fastIndex)</li><li>慢指针：指向更新 新数组下标的位置(slowIndex)</li></ul><p><strong>题解</strong>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">slowIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">fastIndex</span> <span class="operator">=</span> <span class="number">0</span>; fastIndex &lt; nums.length; fastIndex++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(val != nums[fastIndex])&#123;</span><br><span class="line">                nums[slowIndex++] = nums[fastIndex];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slowIndex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/03/12/z3vyDI2wmMcbnJP.gif" alt="27.移除元素-双指针法.gif"></p><h6 id="相关习题-1"><a href="#相关习题-1" class="headerlink" title="相关习题"></a>相关习题</h6><p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/">26. 删除有序数组中的重复项</a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">slow</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">fast</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(; fast &lt; nums.length; fast++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[slow] != nums[fast])&#123;</span><br><span class="line">                nums[slow+<span class="number">1</span>] = nums[fast];</span><br><span class="line">                slow++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题解：同样使用双指针法</p><ul><li>当快指针检索到与慢指针指向元素数值相同时，不做操作</li><li>当快指针检索到与慢指针指向元素数值不同时，将该指向的值与慢指针指向的下一个内存地址中的值进行交换</li></ul>    <div id="aplayer-XpOJerGy" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="1820040979" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;http://xxx/aplayer.min.css&quot;&gt;&lt;script src=&quot;http://xxx/aplayer.min.js&quot; clas</summary>
      
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="算法" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="那就学吧" scheme="http://example.com/tags/%E9%82%A3%E5%B0%B1%E5%AD%A6%E5%90%A7/"/>
    
  </entry>
  
  <entry>
    <title>写给20岁的自己</title>
    <link href="http://example.com/2023/12/15/%E5%86%99%E7%BB%9920%E5%B2%81%E7%9A%84%E8%87%AA%E5%B7%B1/"/>
    <id>http://example.com/2023/12/15/%E5%86%99%E7%BB%9920%E5%B2%81%E7%9A%84%E8%87%AA%E5%B7%B1/</id>
    <published>2023-12-15T13:41:02.000Z</published>
    <updated>2024-03-26T02:14:37.666Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><h2 id="写给二十岁的罗大帅"><a href="#写给二十岁的罗大帅" class="headerlink" title="写给二十岁的罗大帅"></a>写给二十岁的罗大帅</h2><pre><code>你好兄弟，12月15号的你也没干点啥，还是早餐和午餐一块下咽。一个人去了食堂，7块钱的包子，十个，7块钱的饺子，十个。外面下雪了，绵绵的。飘在脸上有点稍纵即逝的冰冷。回宿舍的路上你还是一个人，继续看着冷冰冰的代码。20岁的你还是喜欢.对过去的自己以及自己的所作所为耿耿于怀渐渐的，你对于未来的自己越来越期待以及焦虑你曾想过在鲜艳的20岁实现一个接一个不可能实现的愿望但在不断流失的时间中你有虚度也有把握希望21岁的你能够保持真我，保持独立，保持谦逊，保持傲慢，保持学习，保持喜欢，保持探索，保持欲望，不卑不亢。你所浪费的今天，是昨天死去之人奢望的明天    你所厌恶的现在，是未来的你回不到的曾经要么全力以赴，要么果断放弃明确的生活态度会让一切变得简单，模棱两可，犹豫不决，只会在是非中迷失自我。</code></pre><hr><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=2071177415&auto=1&height=66"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;http://xxx/aplayer.min.css&quot;&gt;&lt;script src=&quot;http://xxx/aplayer.min.js&quot; clas</summary>
      
    
    
    
    <category term="小纸条" scheme="http://example.com/categories/%E5%B0%8F%E7%BA%B8%E6%9D%A1/"/>
    
    <category term="写给自己" scheme="http://example.com/categories/%E5%B0%8F%E7%BA%B8%E6%9D%A1/%E5%86%99%E7%BB%99%E8%87%AA%E5%B7%B1/"/>
    
    
    <category term="写给自己" scheme="http://example.com/tags/%E5%86%99%E7%BB%99%E8%87%AA%E5%B7%B1/"/>
    
  </entry>
  
  <entry>
    <title>罗大帅餐厅Readme</title>
    <link href="http://example.com/2023/12/15/%E7%BD%97%E5%A4%A7%E5%B8%85%E9%A4%90%E5%8E%85Readme/"/>
    <id>http://example.com/2023/12/15/%E7%BD%97%E5%A4%A7%E5%B8%85%E9%A4%90%E5%8E%85Readme/</id>
    <published>2023-12-15T13:39:29.000Z</published>
    <updated>2024-03-26T02:14:09.036Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><p>Mapper和Service</p><p>在软件开发中，通常将应用程序的不同层进行分离，以便实现更好的代码组织和职责分离。通常将应用程序分为三个主要层：表示层、业务逻辑层和数据访问层。其中，业务逻辑层通常又可以分为 Service 层和 Mapper 层。</p><p>Mapper 层是数据访问层的一部分，负责将数据从数据库中提取出来并转换成 Java 对象，或将 Java 对象转换为数据库中的数据。<br>Mapper 层的主要职责是提供数据访问接口，将数据库操作和 Java 对象之间的转换封装起来，使 Service 层无需直接与数据库打交道。</p><p>Service 层是应用程序中的业务逻辑层，主要负责处理业务逻辑，对外提供服务接口。<br>Service 层通常会调用 Mapper 层提供的数据访问接口，将数据转换为业务对象，并进行业务处理。Service 层的主要职责是对外提供服务接口，将数据操作和业务逻辑分离开来，使得业务逻辑更加清晰明了，易于维护和扩展。</p><p>在实际的应用中，Mapper 层和 Service 层的职责界限可能会有所重叠，具体的实现方式也可能因应用的不同而异。但总的来说，Mapper 层主要处理数据访问和转换的问题，而 Service 层主要处理业务逻辑的问题。</p><p><img src="https://s2.loli.net/2023/12/15/uzb8ZY4iMeUftPH.png" alt="3ee8ad7230548d9c3e7d8d4e2a4f9a9.png"></p><p><img src="https://s2.loli.net/2023/12/15/2iNUWQVOY1nkjMh.png" alt="c5c8b3147db74a076f66e7203c77e27.png"></p><p><img src="https://s2.loli.net/2023/12/15/OTnJCSLzKG5i2b4.png" alt="c8257c0c2a40f329ce3f0406ab71f70.png"></p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><h3 id="餐厅后端管理"><a href="#餐厅后端管理" class="headerlink" title="餐厅后端管理"></a>餐厅后端管理</h3><h4 id="1、登录"><a href="#1、登录" class="headerlink" title="1、登录"></a>1、登录</h4><p><img src="https://s2.loli.net/2023/12/15/dsTFAGmQBq31ieL.png" alt="53e10e4b4652dfac7a0bc5e20bbfd6d.png"></p><p><strong>实体</strong>（Employee.java)映射数据库表的实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">status = <span class="number">0</span>/<span class="number">1</span> <span class="comment">//表示不在职和在职</span></span><br></pre></td></tr></table></figure><p><strong>前端</strong>界面（backend/page/login/login.html)通过将输入内容</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">prop</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;loginForm.username&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">auto-complete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;账号&quot;</span></span></span><br><span class="line"><span class="tag">                              <span class="attr">maxlength</span>=<span class="string">&quot;20&quot;</span></span></span><br><span class="line"><span class="tag">                              <span class="attr">prefix-icon</span>=<span class="string">&quot;iconfont icon-user&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">prop</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;loginForm.password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span></span></span><br><span class="line"><span class="tag">                              <span class="attr">prefix-icon</span>=<span class="string">&quot;iconfont icon-lock&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;20&quot;</span></span></span><br><span class="line"><span class="tag">                              @<span class="attr">keyup.enter.native</span>=<span class="string">&quot;handleLogin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br></pre></td></tr></table></figure><p>向后端发送一个http请求，并将“password”和“username”以Json格式传入</p><p><strong>Mapper</strong>层（EmployeeMapper)已经设置了接口对于数据库的操作</p><p><strong>controller</strong> 层（EmployeeController.java)具体对于前端传来的“password”和“username”进行一系列操作（调用Service再调用mapper进行数据库操作）</p><p>1、先将传输进来的密码进行MD5，加密（因为数据库中存储的密码格式为MD4加密的格式）</p><p>2、对于传输进来的用户名，调用MyBatis-Plus方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;(); <span class="comment">// LambdaQueryWrapper是Mybatis-Plus提供的一个查询条件构造器</span></span><br><span class="line">        queryWrapper.eq(Employee::getUsername, employee.getUsername()); <span class="comment">// 相当于sql语句中的where部分，设置接下来getOne查询的范围，即数据库的username = 前台获取的username</span></span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> employeeService.getOne(queryWrapper); </span><br></pre></td></tr></table></figure><p>传入对象emp中，然后将此数据库中密码取出与输入密码相比较看是否相同</p><p>登陆成功后就把ID和此对象传入<strong>Session</strong>中，在后续的请求中，如果需要验证用户的登录状态，可以通过读取 Session 中的员工 ID 来判断用户是否已经登录。</p><h4 id="2、登出"><a href="#2、登出" class="headerlink" title="2、登出"></a>2、登出</h4><p>清空<strong>Session</strong>中内容</p><h4 id="3、员工管理（增加，删除，状态修改）"><a href="#3、员工管理（增加，删除，状态修改）" class="headerlink" title="3、员工管理（增加，删除，状态修改）"></a>3、员工管理（增加，删除，状态修改）</h4><p><strong>界面</strong>（backend/page/member/add.html   list.html)当admin登陆时显示“禁用选项”，普通用户不显示</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">size</span>=<span class="string">&quot;small&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">class</span>=<span class="string">&quot;delBut non&quot;</span></span></span><br><span class="line"><span class="tag">                            @<span class="attr">click</span>=<span class="string">&quot;statusHandle(scope.row)&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">v-if</span>=<span class="string">&quot;user === &#x27;admin&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">                    &gt;</span></span><br><span class="line">                        &#123;&#123; scope.row.status == &#x27;1&#x27; ? &#x27;禁用&#x27; : &#x27;启用&#x27; &#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>增加</strong>输入账号等信息，默认密码设置为身份证后六位（EmployedController.java）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> employee.getIdNumber().substring(employee.getIdNumber().length() - <span class="number">6</span>);</span><br></pre></td></tr></table></figure><p><strong>由于使用了mybatis-plus，在employeeService中继承了IService接口</strong>可以使用save方法</p><p>然后<strong>分页构造器</strong>输出，在前端演示</p><h4 id="4、管理菜单"><a href="#4、管理菜单" class="headerlink" title="4、管理菜单"></a>4、管理菜单</h4><p><strong>新增菜品</strong></p><p>重点，<strong>菜品图片上传/下载</strong></p><p><strong>controller</strong>（CommonController.java）中编写了upload方法以及download方法,trycatch捕获异常处理</p><p><strong>upload</strong>方法是将上传的文件（file）发送给服务器以便其他浏览器或用户在使用时能直接download使用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取原始文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="comment">// 获取文件后缀</span></span><br><span class="line">        <span class="keyword">assert</span> originalFilename != <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="comment">// 使用UUID生成文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.randomUUID() + suffix;</span><br><span class="line">        <span class="comment">// 创建一个目录，判断是否存在，不存在则创建</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(basePath);</span><br><span class="line">        <span class="keyword">if</span> (!dir.exists()) &#123;</span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(basePath + fileName)); <span class="comment">// 将文件转存到指定目录</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><strong>download</strong>是<em>服务端将文件以流的形式写回浏览器的过程</em></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;     <span class="comment">// 文件输入流</span></span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="literal">null</span>;    <span class="comment">// 输出流</span></span><br></pre></td></tr></table></figure><p><strong>前端界面</strong>（backend/page/food/add.html)</p><p>运用了</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 获取菜品分类的信息</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">getDishList</span>()</span><br><span class="line">            <span class="comment">// 口味临时数据</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">getFlavorListHand</span>()</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">id</span> = <span class="title function_">requestUrlParam</span>(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">actionType</span> = <span class="variable language_">this</span>.<span class="property">id</span> ? <span class="string">&#x27;edit&#x27;</span> : <span class="string">&#x27;add&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">id</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">init</span>()</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>导入了口味分类信息列表</p><p>先调用前端的Submit方法对数据初处理</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">submitForm</span>(<span class="params">formName, st</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$refs</span>[formName].<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">                        <span class="keyword">let</span> params = &#123;...<span class="variable language_">this</span>.<span class="property">ruleForm</span>&#125;</span><br><span class="line">                        <span class="comment">// params.flavors = this.dishFlavors</span></span><br><span class="line">                        params.<span class="property">status</span> = <span class="variable language_">this</span>.<span class="property">ruleForm</span> ? <span class="number">1</span> : <span class="number">0</span></span><br><span class="line">                        params.<span class="property">price</span> *= <span class="number">100</span></span><br><span class="line">                        params.<span class="property">categoryId</span> = <span class="variable language_">this</span>.<span class="property">ruleForm</span>.<span class="property">categoryId</span></span><br><span class="line">                        params.<span class="property">flavors</span> = <span class="variable language_">this</span>.<span class="property">dishFlavors</span>.<span class="title function_">map</span>(<span class="function"><span class="params">obj</span> =&gt;</span> (&#123;...obj, <span class="attr">value</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj.<span class="property">value</span>)&#125;))</span><br><span class="line">                        <span class="keyword">delete</span> params.<span class="property">dishFlavors</span></span><br><span class="line">                        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">imageUrl</span>) &#123;</span><br><span class="line">                            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;请上传菜品图片&#x27;</span>)</span><br><span class="line">                            <span class="keyword">return</span></span><br><span class="line">                        &#125;</span><br></pre></td></tr></table></figure><p><strong>因为Dish实体类不满足接收flavor参数</strong>，即需要导入DishDto（dto/DishDto），用于封装页面提交的数据</p><p>在<strong>DIshController.java</strong>中编写（<strong>由于使用了mybatis-plus，在DishService中继承了IService接口</strong>可以使用save方法）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> DishDto dishDto)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;新增菜品，dishDto: &#123;&#125;&quot;</span>, dishDto.toString());       <span class="comment">// Slf4j的日志输出</span></span><br><span class="line">        <span class="comment">// 保存菜品</span></span><br><span class="line">        dishService.saveWithFlavors(dishDto);   <span class="comment">// saveWithFlavors方法为非mybatis-plus提供的方法，用于同时保存菜品和菜品口味</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;新增菜品成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再在<strong>DIshServiceImpl.java</strong>中具体实现菜品的管理</p><p>然后<strong>分页构造器</strong>输出，在前端演示</p><p><strong>交互过程</strong></p><p>1、页面(backend/page/food/add.html)发送ajax请求，请求服务端获取菜品分类数据并展示到下拉框中<br>2、页面发送请求进行图片上传，请求服务端将图片保存到服务器<br>3、页面发送请求进行图片下载，将上传的图片进行回显<br>4、点击保存按钮，发送ajax请求，将菜品相关数据以json形式提交到服务端<br><strong>开发新增菜品功能，其实就是在服务端编写代码去处理前端页面发送的这4次请求即可。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;http://xxx/aplayer.min.css&quot;&gt;&lt;script src=&quot;http://xxx/aplayer.min.js&quot; clas</summary>
      
    
    
    
    <category term="实验" scheme="http://example.com/categories/%E5%AE%9E%E9%AA%8C/"/>
    
    <category term="程序设计实验" scheme="http://example.com/categories/%E5%AE%9E%E9%AA%8C/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="实验" scheme="http://example.com/tags/%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>嵌入式系统实验</title>
    <link href="http://example.com/2023/10/14/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/"/>
    <id>http://example.com/2023/10/14/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/</id>
    <published>2023-10-14T12:51:31.000Z</published>
    <updated>2024-03-26T02:14:24.508Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><h1 id="实验1"><a href="#实验1" class="headerlink" title="实验1"></a>实验1</h1><p>首先分析出需要将两个引脚分别设为推挽输出模式就能点亮，并通过UartAssist观察代码是否正常运行</p><p><img src="https://s2.loli.net/2023/10/14/joDLM4GT2XvEeqZ.png" alt="1.png"></p><p>板子重置后两个LED均被点亮</p><p><img src="https://s2.loli.net/2023/10/14/JgCK8htT5y7bnAr.jpg" alt="2.jpg"></p><p>但是UartAssist乱码了</p><p><img src="https://s2.loli.net/2023/10/14/12FM7GifngoQ4rK.png" alt="3.png"></p><p>为实现按下时LED熄灭，抬起点亮的作用，需要对KEY对应的引脚设置为上拉输入模式（抬起1，按下0）</p><p><img src="https://s2.loli.net/2023/10/14/7CSwQ1l3gN59KjF.jpg" alt="4.jpg"><br>并且在while循环中添加ReadInputDataBit来检测引脚8（KEY0引脚）的输入数据来判断此时是应该点亮还是熄灭LED0</p><p><img src="https://s2.loli.net/2023/10/14/WiAUg3DoNRkfBm9.jpg" alt="5.jpg"></p><p><img src="https://s2.loli.net/2023/10/14/EtJOM3InZwsyH1z.jpg" alt="6.jpg"></p><p>2、实验第二部分</p><p>刚开始直接实现Reset跟Set下载到板子上并没有闪烁效果，仔细思考后发现这个过程没有间隔是发现不了闪烁现象的，所以写了一个Delay()函数将熄灭与点亮过程间隔开，然后两个灯分别点亮和熄灭的过程可以近似于同步实现。</p><p><img src="https://s2.loli.net/2023/10/14/8ar9K1gCYQNsH5l.png" alt="7.png"><br><img src="https://s2.loli.net/2023/10/14/Xav3LNih58gwxdP.png" alt="8.png"></p><p>跑马灯（让两个LED前后点亮熄灭）</p><p><img src="https://s2.loli.net/2023/10/14/qUhouGcZeT2rHk4.png" alt="9.png"></p><div class="video"><video controls preload><source src="https://img.nickyam.com/file/6c81e5536235240f155de.mp4" type="video/mp4">Your browser does not support the video tag.</video></div><p><a href="https://img.nickyam.com/file/6c81e5536235240f155de.mp4">https://img.nickyam.com/file/6c81e5536235240f155de.mp4</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;http://xxx/aplayer.min.css&quot;&gt;&lt;script src=&quot;http://xxx/aplayer.min.js&quot; clas</summary>
      
    
    
    
    <category term="实验" scheme="http://example.com/categories/%E5%AE%9E%E9%AA%8C/"/>
    
    <category term="嵌入式系统" scheme="http://example.com/categories/%E5%AE%9E%E9%AA%8C/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="实验" scheme="http://example.com/tags/%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>MySQL学习</title>
    <link href="http://example.com/2023/09/26/MySQL%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2023/09/26/MySQL%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-09-26T09:03:25.000Z</published>
    <updated>2024-03-26T02:11:25.515Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><h1 id="初识MySQL"><a href="#初识MySQL" class="headerlink" title="初识MySQL"></a>初识MySQL</h1><h2 id="一、数据库三大范式"><a href="#一、数据库三大范式" class="headerlink" title="一、数据库三大范式"></a>一、数据库三大范式</h2><p>1、第一范式(1NF)是指数据库表的每一列都是不可分割的基本数据线；也就是说：每列的值具有原子性，不可再分割。<br>2、第二范式(2NF)是在第一范式(1NF)的基础上建立起来得，满足第二范式(2NF)必须先满足第一范式(1NF)。如果表是单主键，那么主键以外的列必须完全依赖于主键；如果表是复合主键，那么主键以外的列必须完全依赖于主键，不能仅依赖主键的一部分。<br>3、第三范式(3NF)是在第二范式的基础上建立起来的，即满足第三范式必须要先满足第二范式。第三范式(3NF)要求：表中的非主键列必须和主键直接相关而不能间接相关；也就是说：非主键列之间不能相关依赖。</p><h2 id="二、MySQL中出现的新的数据类型"><a href="#二、MySQL中出现的新的数据类型" class="headerlink" title="二、MySQL中出现的新的数据类型"></a>二、MySQL中出现的新的数据类型</h2><h3 id="日期与时间类型"><a href="#日期与时间类型" class="headerlink" title="日期与时间类型"></a>日期与时间类型</h3><h2 id="1-YEAR"><a href="#1-YEAR" class="headerlink" title="1.YEAR"></a>1.YEAR</h2><p>YEAR类型用于表示年份，在MySQL中，可以使用以下三种格式指定YEAR类型 的值。<br>1、使用4位字符串或数字表示，范围为’1901’—‘2155’或1901—2155。例如，输入 ‘2019’或2019插入到数据库中的值均为2019。<br>2、使用两位字符串表示，范围为’00’—‘99’。其中，‘00’—‘69’范围的值会被转换为 2000—2069范围的YEAR值，‘70’—‘99’范围的值会被转换为1970—1999范围的YEAR 值。例如，输入’19’插入到数据库中的值为2019。<br>3、使用两位数字表示，范围为1—99。其中，1—69范围的值会被转换为2001— 2069范围的YEAR值，70—99范围的值会被转换为1970—1999范围的YEAR值。例 如，输入19插入到数据库中的值为2019。<br><strong>请注意：当使用YEAR类型时，一定要区分’0’和0。因为字符串格式的’0’表示的YEAR值是2000而数字格式的0表示的YEAR值是0000。</strong></p><h3 id="2、TIME"><a href="#2、TIME" class="headerlink" title="2、TIME"></a>2、TIME</h3><p>TIME类型用于表示时间值，它的显示形式一般为HH:MM:SS，其中，HH表示小时， MM表示分,SS表示秒。在MySQL中，可以使用以下3种格式指定TIME类型的值。<br>1、以’D HH:MM:SS’字符串格式表示。其中，D表示日可取0—34之间的值, 插入数据时，小时的值等于(DX24+HH)。例如，输入’2 11:30:50’插入数据库中的日期为59:30:50。<br>2、以’HHMMSS’字符串格式或者HHMMSS数字格式表示。 例如，输入’115454’或115454,插入数据库中的日期为11:54:54<br>3、使用CURRENT_TIME或NOW()输入当前系统时间。</p><h3 id="3、DATETIME"><a href="#3、DATETIME" class="headerlink" title="3、DATETIME"></a>3、DATETIME</h3><p>DATETIME类型用于表示日期和时间，它的显示形式为’YYYY-MM-DD HH: MM:SS’，其中，YYYY表示年，MM表示月，DD表示日，HH表示小时，MM表示分，SS 表示秒。在MySQL中，可以使用以下4种格式指定DATETIME类型的值。<br>以’YYYY-MM-DD HH:MM:SS’或者’YYYYMMDDHHMMSS’字符串格式表示的日期和时间，取值范围为’1000-01-01 00:00:00’—‘9999-12-3 23:59:59’。例如，输入’2019-01-22 09:01:23’或 ‘20140122_0_90123’插入数据库中的 DATETIME 值都为 2019-01-22 09:01:23。<br>1、以’YY-MM-DD HH:MM:SS’或者’YYMMDDHHMMSS’字符串格式表示的日期和时间，其中YY表示年，取值范围为’00’—‘99’。与DATE类型中的YY相同，‘00’— ‘69’范围的值会被转换为2000—2069范围的值，‘70’—‘99’范围的值会被转换为1970—1999范围的值。<br>2、以YYYYMMDDHHMMSS或者YYMMDDHHMMSS数字格式表示的日期和时间。例如，插入20190122090123或者190122090123,插入数据库中的DATETIME值都 为 2019-01-22 09:01:23。<br>3、使用NOW来输入当前系统的日期和时间。</p><h3 id="3、-TIMESTAMP"><a href="#3、-TIMESTAMP" class="headerlink" title="3、 TIMESTAMP"></a>3、 TIMESTAMP</h3><p>TIMESTAMP类型用于表示日期和时间，它的显示形式与DATETIME相同但取值范围比DATETIME小。在此，介绍几种TIMESTAMP类型与DATATIME类型不同的形式：<br>1、使用CURRENT_TIMESTAMP输入系统当前日期和时间。<br>2、输入NULL时系统会输入系统当前日期和时间。<br>3、无任何输入时系统会输入系统当前日期和时间。<br>————————————————<br>版权声明：本文为CSDN博主「归彦」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_45851945/article/details/114287877">https://blog.csdn.net/weixin_45851945/article/details/114287877</a></p><h2 id="二、数据表的基本操作"><a href="#二、数据表的基本操作" class="headerlink" title="二、数据表的基本操作"></a>二、数据表的基本操作</h2><h2 id="对数据库的操作"><a href="#对数据库的操作" class="headerlink" title="对数据库的操作"></a>对数据库的操作</h2><h4 id="1-创建（查看）数据库"><a href="#1-创建（查看）数据库" class="headerlink" title="1.创建（查看）数据库"></a>1.创建（查看）数据库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database 名称;       //创建</span><br><span class="line">show create database 名称;  //查看</span><br></pre></td></tr></table></figure><h4 id="2、查询MySQL中所有的数据库"><a href="#2、查询MySQL中所有的数据库" class="headerlink" title="2、查询MySQL中所有的数据库"></a>2、查询MySQL中所有的数据库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><h4 id="3、切换数据库（重要，刚开始不会就一直在database-里搞不出来）"><a href="#3、切换数据库（重要，刚开始不会就一直在database-里搞不出来）" class="headerlink" title="3、切换数据库（重要，刚开始不会就一直在database()里搞不出来）"></a>3、切换数据库（重要，刚开始不会就一直在database()里搞不出来）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use 数据名;</span><br></pre></td></tr></table></figure><h2 id="对数据表的操作"><a href="#对数据表的操作" class="headerlink" title="对数据表的操作"></a>对数据表的操作</h2><h3 id="1、创建表"><a href="#1、创建表" class="headerlink" title="1、创建表"></a>1、创建表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名（</span><br><span class="line">属性1名称 类型, //注意！这里是逗号隔开</span><br><span class="line">属性2名称 类型,</span><br><span class="line">...</span><br><span class="line">属性3名称 类型  //注意！这里没有逗号啦哈哈</span><br><span class="line">）;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、查看数据表"><a href="#2、查看数据表" class="headerlink" title="2、查看数据表"></a>2、查看数据表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show tables;//同databases，都是复数</span><br><span class="line">show create table 表名;</span><br></pre></td></tr></table></figure><h4 id="3、查看表的字段信息-常用"><a href="#3、查看表的字段信息-常用" class="headerlink" title="3、查看表的字段信息(常用)"></a>3、查看表的字段信息(常用)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desc 表名;</span><br></pre></td></tr></table></figure><h4 id="4、修改数据表"><a href="#4、修改数据表" class="headerlink" title="4、修改数据表"></a>4、修改数据表</h4><h5 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 旧表名 rename to 新表名;</span><br></pre></td></tr></table></figure><h5 id="修改字段名"><a href="#修改字段名" class="headerlink" title="修改字段名"></a>修改字段名</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table stu change name sname varchar(10);</span><br></pre></td></tr></table></figure><h5 id="修改字段数据类型"><a href="#修改字段数据类型" class="headerlink" title="修改字段数据类型"></a>修改字段数据类型</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table stu modify sname int;</span><br></pre></td></tr></table></figure><h5 id="增加字段"><a href="#增加字段" class="headerlink" title="增加字段"></a>增加字段</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table stu add address varchar(50);</span><br></pre></td></tr></table></figure><h1 id="Oi还在更新ing…"><a href="#Oi还在更新ing…" class="headerlink" title="Oi还在更新ing…"></a>Oi还在更新ing…</h1><h1 id="插播歌曲"><a href="#插播歌曲" class="headerlink" title="插播歌曲"></a>插播歌曲</h1><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1844949868&auto=1&height=66"></iframe><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=2080198236&auto=1&height=66"></iframe><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=2042559344&auto=1&height=66"></iframe><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=2080196537&auto=1&height=66"></iframe><h1 id="福利"><a href="#福利" class="headerlink" title="福利"></a>福利</h1><div class="gallery">    <div class="fj-gallery  data" data-rowheight="220" data-limit="10">    <span class="gallery-data">[{"url":"https://s2.loli.net/2023/09/30/SvcJ3eZBwmztd98.jpg","alt":"F2dU6JtWsAA2Hd6.jpg"}]</span>    </div>    <button class="gallery-load-more"><span>加载更多</span><i class="fa-solid fa-arrow-down"></i></button>    </div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;http://xxx/aplayer.min.css&quot;&gt;&lt;script src=&quot;http://xxx/aplayer.min.js&quot; clas</summary>
      
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="MySQL" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/MySQL/"/>
    
    
    <category term="那就学吧" scheme="http://example.com/tags/%E9%82%A3%E5%B0%B1%E5%AD%A6%E5%90%A7/"/>
    
  </entry>
  
  <entry>
    <title>6月23日的深夜EMO</title>
    <link href="http://example.com/2023/06/23/6%E6%9C%8823%E6%97%A5%E7%9A%84%E6%B7%B1%E5%A4%9CEMO/"/>
    <id>http://example.com/2023/06/23/6%E6%9C%8823%E6%97%A5%E7%9A%84%E6%B7%B1%E5%A4%9CEMO/</id>
    <published>2023-06-23T14:57:46.000Z</published>
    <updated>2024-03-26T02:09:34.988Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><h2 id="EMO"><a href="#EMO" class="headerlink" title="EMO"></a>EMO</h2><pre><code>突然听到这首歌，仿佛又回到那个夜晚，一个男孩和一个女孩。男孩拿着一部可以敲核桃的老年机，用从客厅偷摸拿来的iPad放着这首歌。女孩在电话的那头，两个人都不会唱说唱部分，因为实在是太快了，所以只好合着唱着简单的副歌，躲在被窝里，都不敢太大声唱，怕吵醒了隔壁房的父母，怕吵醒了青春易逝的梦。</code></pre><hr><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=461544161&auto=1&height=66"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;http://xxx/aplayer.min.css&quot;&gt;&lt;script src=&quot;http://xxx/aplayer.min.js&quot; clas</summary>
      
    
    
    
    <category term="小纸条" scheme="http://example.com/categories/%E5%B0%8F%E7%BA%B8%E6%9D%A1/"/>
    
    <category term="EMO" scheme="http://example.com/categories/%E5%B0%8F%E7%BA%B8%E6%9D%A1/EMO/"/>
    
    
    <category term="小心思" scheme="http://example.com/tags/%E5%B0%8F%E5%BF%83%E6%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>c++复习</title>
    <link href="http://example.com/2023/06/12/c-%E5%A4%8D%E4%B9%A0/"/>
    <id>http://example.com/2023/06/12/c-%E5%A4%8D%E4%B9%A0/</id>
    <published>2023-06-12T07:51:46.000Z</published>
    <updated>2024-03-26T02:08:03.169Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="Chap-12"><a href="#Chap-12" class="headerlink" title="Chap 12"></a>Chap 12</h2><h6 id="1-如果父类中的方法没有被声明为-virtual，而在子类中进行了重写，那么通过父类指针或引用调用该方法时，将会按照静态绑定的方式调用父类中的方法，而不会调用子类中的重写方法。"><a href="#1-如果父类中的方法没有被声明为-virtual，而在子类中进行了重写，那么通过父类指针或引用调用该方法时，将会按照静态绑定的方式调用父类中的方法，而不会调用子类中的重写方法。" class="headerlink" title="1.如果父类中的方法没有被声明为 virtual，而在子类中进行了重写，那么通过父类指针或引用调用该方法时，将会按照静态绑定的方式调用父类中的方法，而不会调用子类中的重写方法。"></a>1.如果父类中的方法没有被声明为 <code>virtual</code>，而在子类中进行了重写，那么通过父类指针或引用调用该方法时，将会按照静态绑定的方式调用父类中的方法，而不会调用子类中的重写方法。</h6><p>这意味着无论父类指针或引用指向的实际对象是父类对象还是子类对象，调用的都是父类中的方法。子类中的重写方法将被忽略。</p><p>以下是一个示例代码来说明这一点：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Base::foo()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Derived::foo()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Base* ptr = <span class="keyword">new</span> <span class="built_in">Derived</span>();</span><br><span class="line">    ptr-&gt;<span class="built_in">foo</span>();  <span class="comment">// 调用父类的 foo() 函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> ptr;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述示例中，父类 <code>Base</code> 中的 <code>foo()</code> 方法没有被声明为 <code>virtual</code>，而在子类 <code>Derived</code> 中进行了重写。在 <code>main()</code> 函数中，我们使用父类指针 <code>ptr</code> 指向子类对象，并调用 <code>foo()</code> 方法。</p><p>由于父类中的 <code>foo()</code> 方法没有被声明为 <code>virtual</code>，因此会按照静态绑定的方式进行调用，而不是动态绑定。因此，无论实际指向的对象是父类对象还是子类对象，都会调用父类 <code>Base</code> 中的 <code>foo()</code> 方法。因此，输出将是 “Base::foo()”。</p><p>这就是为什么在实现多态性时，需要将基类中的相关方法声明为 <code>virtual</code>，以确保在通过指针或引用调用时，调用的是实际对象的重写方法而不是基类的方法。</p><p>要点0：判断类的成员函数是否为“虚函数”的方法：该函数或者是该类型自己明确声明为”virtual”，或者是该类型的某个直接/间接基类声明为“virtual”。</p><p>要点1：当通过对象名调用成员函数时，无论被调用函数是否为虚函数，被调用的函数是（1）该对象所属类型定义的，或（2）其基类所定义的。</p><p>要点2：当通过基类指针或引用调用非虚成员函数时，被调用的函数一定是基类（或基类的基类）所定义的。</p><p>要点3：当通过基类指针或引用调用虚成员函数时，被调用的函数是哪个则由指针所指向的对象类型确定（多态性），即若所指向的对象之类型是基类，则调用基类所定义的虚函数，否则调用子类所定义的虚函数（若子类重置了该函数的话）。</p><h5 id="2-在-C-中，对象的构造函数和析构函数的调用顺序遵循以下规则："><a href="#2-在-C-中，对象的构造函数和析构函数的调用顺序遵循以下规则：" class="headerlink" title="2.在 C++ 中，对象的构造函数和析构函数的调用顺序遵循以下规则："></a>2.在 C++ 中，对象的构造函数和析构函数的调用顺序遵循以下规则：</h5><ol><li><p>对象的构造顺序：派生类先于基类。</p><ul><li>当创建派生类对象时，首先会调用基类的构造函数，然后再调用派生类自身的构造函数。</li><li>构造函数的调用顺序与派生类继承基类的顺序有关，即先继承的基类会先被构造。</li></ul></li><li><p>对象的析构顺序：基类先于派生类。</p><ul><li>当对象生命周期结束时，析构函数的调用顺序与构造函数相反，先调用派生类的析构函数，然后再调用基类的析构函数。</li><li>析构函数的调用顺序与派生类继承基类的顺序相反，即先继承的基类会后被析构。</li></ul></li></ol><p>下面是一个示例代码，用于演示构造函数和析构函数的调用顺序：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;Base Constructor\n&quot;</span>; &#125;</span><br><span class="line">    ~<span class="built_in">Base</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;Base Destructor\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;Derived Constructor\n&quot;</span>; &#125;</span><br><span class="line">    ~<span class="built_in">Derived</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;Derived Destructor\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Derived obj;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Base Constructor</span><br><span class="line">Derived Constructor</span><br><span class="line">Derived Destructor</span><br><span class="line">Base Destructor</span><br></pre></td></tr></table></figure><p>从输出结果可以看出，构造函数的调用顺序是基类先于派生类，而析构函数的调用顺序是基类后于派生类。</p><h2 id="面向对象复习"><a href="#面向对象复习" class="headerlink" title="面向对象复习"></a>面向对象复习</h2><h2 id="1、局部变量与全局变量的定义以及初始化"><a href="#1、局部变量与全局变量的定义以及初始化" class="headerlink" title="1、局部变量与全局变量的定义以及初始化"></a>1、局部变量与全局变量的定义以及初始化</h2><p>当局部变量被定义时，系统不会对其初始化，您必须自行对其初始化。定义全局变量时，系统会自动初始化。</p><p>局部变量和全局变量是在C++中用于存储数据的两种变量类型。它们有不同的作用域和生命周期。</p><ol><li><p>局部变量：</p><ul><li>局部变量是在函数或代码块内部声明的变量，其作用域仅限于声明它的函数或代码块内部。</li><li>局部变量的生命周期从其所在函数或代码块开始，到函数或代码块结束时结束。</li><li><h6 id="局部变量在声明时不会自动初始化，必须显式初始化或在使用之前赋值。"><a href="#局部变量在声明时不会自动初始化，必须显式初始化或在使用之前赋值。" class="headerlink" title="局部变量在声明时不会自动初始化，必须显式初始化或在使用之前赋值。"></a>局部变量在声明时不会自动初始化，必须显式初始化或在使用之前赋值。</h6></li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">myFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x;  <span class="comment">// 局部变量x的声明</span></span><br><span class="line">    x = <span class="number">10</span>; <span class="comment">// 局部变量x的赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行一些操作...</span></span><br><span class="line"></span><br><span class="line">&#125;  <span class="comment">// 函数结束，局部变量x的生命周期结束</span></span><br></pre></td></tr></table></figure></li><li><p>全局变量：</p><ul><li>全局变量是在任何函数之外声明的变量，其作用域覆盖整个程序。</li><li>全局变量的生命周期从程序开始时创建，直到程序结束时销毁。</li><li>全局变量在声明时会自动初始化为默认值（例如0对于数字类型，nullptr对于指针类型，false对于bool类型）或者显式指定的初始值。</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> globalVariable;  <span class="comment">// 全局变量的声明和默认初始化</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    globalVariable = <span class="number">20</span>;  <span class="comment">// 对全局变量的赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行一些操作...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 对全局变量的使用...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  <span class="comment">// 程序结束，全局变量的生命周期结束</span></span><br></pre></td></tr></table></figure></li></ol><p>需要注意以下几点：</p><ul><li>全局变量的使用应慎重，因为它们在整个程序中可见，可能会导致命名冲突和难以维护的代码。</li><li>在函数内部定义的变量会隐藏同名的全局变量。</li><li>局部变量和全局变量的命名应遵循一致的命名规范，以提高代码的可读性和可维护性。</li><li>C++还引入了类成员变量和静态变量等更多变量类型，具有不同的作用域和生命周期规则。</li></ul><h2 id="2、C-引用-vs-指针"><a href="#2、C-引用-vs-指针" class="headerlink" title="2、C++ 引用 vs 指针"></a>2、C++ 引用 vs 指针</h2><p>引用很容易与指针混淆，它们之间有三个主要的不同：</p><ul><li>不存在空引用。引用必须连接到一块合法的内存。</li><li>一旦引用被初始化为一个对象，就不能被指向到另一个对象。指针可以在任何时候指向到另一个对象。</li><li>引用必须在创建时被初始化。指针可以在任何时间被初始化。</li></ul><h2 id="3、类"><a href="#3、类" class="headerlink" title="3、类"></a>3、类</h2><p>在C++中，<code>public</code>、<code>private</code> 和 <code>protected</code> 是访问控制修饰符，用于控制类的成员（包括变量和函数）在类内部和外部的可见性和访问权限。</p><ol><li><p><code>public</code> 成员：公有成员在类的内部和外部均可访问。可以通过对象或指针直接访问公有成员。公有成员通常用于类的接口，用于提供对外部的公开访问接口。</p></li><li><p><code>private</code> 成员：私有成员只能在类的内部访问，外部无法直接访问。私有成员对外部是隐藏的，只能通过类的公有成员函数间接访问私有成员。私有成员通常用于实现类的内部细节和数据隐藏，保护类的封装性。</p></li><li><p><code>protected</code> 成员：受保护成员类似于私有成员，只能在类的内部和派生类中访问。受保护成员对于外部是隐藏的，但可以在派生类中直接访问。受保护成员通常用于实现继承关系中的成员共享和派生类的访问权限控制。</p></li></ol><p>这些访问修饰符可以应用于类的成员变量和成员函数。默认情况下，类的成员变量是私有的，成员函数是公有的。</p><p>例如，下面是一个示例类的定义，展示了不同访问修饰符的使用：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:    <span class="comment">// 公有成员</span></span><br><span class="line">    <span class="type">int</span> publicVar;  <span class="comment">// 公有成员变量</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">publicFunc</span><span class="params">()</span></span>;  <span class="comment">// 公有成员函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:   <span class="comment">// 私有成员</span></span><br><span class="line">    <span class="type">int</span> privateVar;  <span class="comment">// 私有成员变量</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">privateFunc</span><span class="params">()</span></span>;  <span class="comment">// 私有成员函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>: <span class="comment">// 受保护成员</span></span><br><span class="line">    <span class="type">int</span> protectedVar;  <span class="comment">// 受保护成员变量</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">protectedFunc</span><span class="params">()</span></span>;  <span class="comment">// 受保护成员函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>请注意，访问修饰符只适用于类的成员，而不适用于类本身。类本身的访问权限由其声明所在的上下文决定，例如命名空间或其他类。</p><ol><li><p>默认情况下，类的所有成员都是私有的。</p></li><li><p>protected（受保护）成员在派生类（即子类）中是可访问的。</p></li><li><p>继承中的特点</p><p>有public, protected, private三种继承方式，它们相应地改变了基类成员的访问属性。</p><ul><li>1.<strong>public 继承：</strong>基类 public 成员，protected 成员，private 成员的访问属性在派生类中分别变成：public, protected, private</li><li>2.<strong>protected 继承：</strong>基类 public 成员，protected 成员，private 成员的访问属性在派生类中分别变成：protected, protected, private</li><li>3.<strong>private 继承：</strong>基类 public 成员，protected 成员，private 成员的访问属性在派生类中分别变成：private, private, private</li></ul><p>但无论哪种继承方式，上面两点都没有改变：</p><ul><li>1.private 成员只能被本类成员（类内）和友元访问，不能被派生类访问；</li><li>2.protected 成员可以被派生类访问。</li></ul></li></ol><h3 id="1、构造函数"><a href="#1、构造函数" class="headerlink" title="1、构造函数"></a>1、构造函数</h3><p>类的<strong>构造函数</strong>是类的一种特殊的成员函数，它会在每次创建类的新对象时执行。</p><p><strong>构造函数的名称与类的名称是完全相同的，并且不会返回任何类型，也不会返回 void。构造函数可用于为某些成员变量设置初始值。</strong></p><h6 id="注释：初始化列表是一种在对象创建时用于初始化成员变量的语法构造。它允许在对象构造函数的初始化阶段，使用初始化列表语法为成员变量赋初值。"><a href="#注释：初始化列表是一种在对象创建时用于初始化成员变量的语法构造。它允许在对象构造函数的初始化阶段，使用初始化列表语法为成员变量赋初值。" class="headerlink" title="注释：初始化列表是一种在对象创建时用于初始化成员变量的语法构造。它允许在对象构造函数的初始化阶段，使用初始化列表语法为成员变量赋初值。"></a>注释：初始化列表是一种在对象创建时用于初始化成员变量的语法构造。它允许在对象构造函数的初始化阶段，使用初始化列表语法为成员变量赋初值。</h6><p>在 C++ 中，类的构造函数可以使用初始化列表来初始化其成员变量，而不是在构造函数体中逐个赋值。初始化列表使用冒号（:）后跟成员变量的列表，并在每个成员变量之间使用逗号分隔。</p><p>以下是一个使用初始化列表的示例：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>(<span class="type">int</span> x, <span class="type">int</span> y) : <span class="built_in">a</span>(x), <span class="built_in">b</span>(y) &#123;</span><br><span class="line">        <span class="comment">// 构造函数体</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在上面的示例中，<code>MyClass</code>类有两个私有成员变量<code>a</code>和<code>b</code>。构造函数使用初始化列表来初始化这两个成员变量，<code>: a(x), b(y)</code> 表示将参数 <code>x</code> 赋给成员变量 <code>a</code>，将参数 <code>y</code> 赋给成员变量 <code>b</code>。</p><p>使用初始化列表的主要优势包括：</p><ul><li>效率：通过使用初始化列表，可以避免在构造函数体内执行额外的赋值操作，从而提高代码的执行效率。</li><li>常量成员变量初始化：初始化列表使得可以在构造函数中初始化常量成员变量。</li><li>引用成员变量初始化：初始化列表也支持对引用类型的成员变量进行初始化。</li></ul><p>需要注意以下几点：</p><ul><li>初始化列表的成员变量顺序应与它们在类定义中的声明顺序一致。</li><li>如果某个成员变量没有在初始化列表中进行初始化，它将使用其类型的默认构造函数进行初始化。</li><li>在初始化列表中可以执行更复杂的操作，例如调用其他函数或执行表达式，以计算初始值。</li><li>如果类具有多个构造函数，每个构造函数可以选择使用初始化列表或在构造函数体内逐个赋值的方式来初始化成员变量。</li></ul><p>使用初始化列表可以提高代码的可读性和性能，尤其在处理复杂的类和成员变量初始化时特别有用。</p><h3 id="2、析构函数"><a href="#2、析构函数" class="headerlink" title="2、析构函数"></a>2、析构函数</h3><p>类的<strong>析构函数</strong>是类的一种特殊的成员函数，它会在每次删除所创建的对象时执行。</p><p>析构函数的名称与类的名称是完全相同的，只是在前面加了个波浪号（~）作为前缀，<strong>它不会返回任何值</strong>，也不能带有任何参数。析构函数有助于在跳出程序（比如关闭文件、释放内存等）前释放资源。</p><h3 id="3、友元函数"><a href="#3、友元函数" class="headerlink" title="3、友元函数"></a>3、友元函数</h3><p>类的友元函数是定义在类外部，但有权访问类的所有私有（private）成员和保护（protected）成员。尽管友元函数的原型有在类的定义中出现过，但是友元函数并不是成员函数。</p><p>友元可以是一个函数，该函数被称为友元函数；友元也可以是一个类，该类被称为友元类，在这种情况下，整个类及其所有成员都是友元。</p><h3 id="4、this（实质是当前对象的指针）"><a href="#4、this（实质是当前对象的指针）" class="headerlink" title="4、this（实质是当前对象的指针）"></a>4、this（实质是当前对象的指针）</h3><p>在C++中，关键字”this”代表当前对象的指针。它是一个隐式参数，可以在类的成员函数中使用，用于指向当前正在调用该函数的对象。</p><p>this指针的主要作用有以下几个方面：</p><ol><li><p>访问成员变量和成员函数：<br>使用this指针可以在类的成员函数中访问当前对象的成员变量和成员函数。当成员变量和参数名字冲突时，使用this指针可以明确指定成员变量。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setValue</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;value = value;  <span class="comment">// 使用this指针访问成员变量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>返回当前对象：<br>在某些情况下，成员函数可能需要返回当前对象的引用或指针，以便实现方法的链式调用。可以使用this指针来返回当前对象自身。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">MyClass&amp; <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 进行一些操作...</span></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;  <span class="comment">// 返回当前对象的引用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>解决命名冲突：<br>当在类的成员函数中存在局部变量或函数参数与成员变量同名时，可以使用this指针来区分它们，以解决命名冲突。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setValue</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;value = value;  <span class="comment">// 使用this指针解决命名冲突</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><p>需要注意以下几点：</p><ul><li>this指针只能在非静态成员函数中使用。静态成员函数没有this指针，因为它们与任何特定的对象无关。</li><li>在成员函数中，可以将this指针显式地传递给其他函数，以便在函数之间传递当前对象。</li><li>this指针是一个指针，可以通过解引用运算符<code>*</code>来获取当前对象。</li><li>当使用成员函数调用时，编译器会自动隐式地传递当前对象的地址给this指针，无需手动提供。</li></ul><p>this指针在类的成员函数中提供了对当前对象的访问权限，允许在成员函数内部操作和引用当前对象的成员。它是实现面向对象编程中重要的概念之一。</p><h3 id="5、类中的静态变量（属于类本身而不是类的对象）"><a href="#5、类中的静态变量（属于类本身而不是类的对象）" class="headerlink" title="5、类中的静态变量（属于类本身而不是类的对象）"></a>5、类中的静态变量（属于类本身而不是类的对象）</h3><p>在C++中，静态成员变量的初始化不能在类的定义中进行，因为静态成员变量是属于类本身而不是类的对象。类的定义只是描述了类的成员的类型和结构，并不是实际的内存分配和初始化的地方。</p><p>静态成员变量必须在类外部的全局作用域中进行定义和初始化。通常，在类的定义中仅声明静态成员变量，而不进行初始化。然后，在类外部通过类名加上作用域解析操作符<code>::</code>来初始化静态成员变量。</p><p>以下是一个示例：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> staticVar; <span class="comment">// 静态成员变量的声明</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> MyClass::staticVar = <span class="number">42</span>; <span class="comment">// 静态成员变量的定义和初始化</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 访问静态成员变量</span></span><br><span class="line">    <span class="type">int</span> value = MyClass::staticVar;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述示例中，静态成员变量<code>staticVar</code>在类中的声明时没有进行初始化，而是在类外部通过<code>MyClass::staticVar = 42</code>的方式进行了定义和初始化。</p><p>这是因为静态成员变量不是类的一部分，它们是与类相关联的全局变量。因此，它们的内存分配和初始化需要在类的外部进行。</p><p>需要注意的是，静态成员变量只有一个实例，无论类的对象有多少个，它们共享同一个静态成员变量。在类外部对静态成员变量的初始化只会执行一次，并且在程序运行期间保持不变。</p><h2 id="4、继承"><a href="#4、继承" class="headerlink" title="4、继承"></a>4、继承</h2><p><strong>virtual</strong>所需要注意到细节</p><p>在 C++ 中，当我们在派生类中重写（覆盖）基类的虚函数时，有一些细节需要注意。以下是一些重置虚函数时的重要细节：</p><ol><li><p><strong>函数签名必须匹配</strong>：派生类中重写的虚函数的函数签名（函数名称、参数列表和const限定符）必须与基类中的虚函数完全匹配。否则，它们将被视为不同的函数，而不是重写。</p></li><li><p>使用<code>override</code>关键字：为了明确表示派生类中的函数是对基类虚函数的重写，可以使用<code>override</code>关键字。这可以帮助编译器进行静态类型检查，确保我们正确地进行了函数的重写。</p></li><li><p>返回类型协变：重写的虚函数的返回类型必须是协变的。协变性意味着派生类中重写的函数可以返回基类函数返回类型的派生类。这样可以确保多态性正常工作，并且不会引发类型转换错误。</p></li><li><p>基类函数应为虚函数：只有将函数声明为基类中的虚函数，才能在派生类中进行重写。如果基类函数不是虚函数，则在派生类中定义具有相同名称和参数列表的函数将被视为新的独立函数，而不是重写。</p></li><li><p>可以使用<code>final</code>关键字：如果不希望派生类再次重写虚函数，可以在基类中使用<code>final</code>关键字。在派生类中再次尝试重写被标记为<code>final</code>的虚函数将导致编译错误。</p></li><li><p>使用<code>super</code>（C++11及以上）：在派生类的重写函数中，可以使用<code>super</code>关键字（C++11及以上版本）来调用基类的虚函数。这样可以在派生类中执行基类函数的逻辑，并添加自己的额外逻辑。</p></li></ol><p>重写虚函数是实现多态性的重要机制之一。通过正确地重写虚函数，我们可以实现基于对象的动态绑定，使得在运行时能够调用正确的函数版本，实现多态行为。</p><p><img src="/.com//Users\LUODAS~1\AppData\Local\Temp\WeChat Files\89cdb6e997d45ef99399d3c37c2d71b.png" alt="89cdb6e997d45ef99399d3c37c2d71b"></p><p><img src="/.com//Users\LUODAS~1\AppData\Local\Temp\WeChat Files\bdc824694eb64ef230647a030c561df.png" alt="bdc824694eb64ef230647a030c561df"></p><p>且需要注意，存在虚函数的类中，<strong>基类和派生类谁是抽象类的问题</strong></p><h2 id="5、namespace"><a href="#5、namespace" class="headerlink" title="5、namespace"></a>5、namespace</h2><p>在C++中，命名空间（Namespace）用于将全局作用域划分为不同的区域，以避免名称冲突并提供更好的代码组织和模块化。命名空间提供了一种将相关的函数、类、变量等实体进行分组的方式。</p><p>以下是关于命名空间的详细内容和用法：</p><ol><li><p>命名空间的定义：<br>命名空间使用<code>namespace</code>关键字进行定义，后跟命名空间的名称。命名空间的定义可以位于全局作用域或其他命名空间内。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> MyNamespace &#123;</span><br><span class="line">    <span class="comment">// 命名空间内的实体（函数、类、变量等）的定义</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>命名空间的使用：<br>可以使用作用域解析运算符<code>::</code>来引用命名空间内的实体。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> MyNamespace &#123;</span><br><span class="line">    <span class="type">int</span> value = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 函数的定义</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> value = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    MyNamespace::<span class="built_in">foo</span>();  <span class="comment">// 调用命名空间中的函数</span></span><br><span class="line">    std::cout &lt;&lt; MyNamespace::value &lt;&lt; std::endl;  <span class="comment">// 访问命名空间中的变量</span></span><br><span class="line">    std::cout &lt;&lt; value &lt;&lt; std::endl;  <span class="comment">// 访问局部变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>命名空间的嵌套：<br>可以在命名空间内创建其他命名空间，以创建更多层次的组织结构。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Outer &#123;</span><br><span class="line">    <span class="type">int</span> value = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">namespace</span> Inner &#123;</span><br><span class="line">        <span class="type">int</span> value = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; Outer::value &lt;&lt; std::endl;  <span class="comment">// 输出 10</span></span><br><span class="line">    std::cout &lt;&lt; Outer::Inner::value &lt;&lt; std::endl;  <span class="comment">// 输出 20</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>命名空间的别名：<br>可以使用<code>using</code>关键字为命名空间或命名空间内的实体创建别名，以简化代码。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> MyLongNamespace &#123;</span><br><span class="line">    <span class="type">int</span> value = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Alias = MyLongNamespace;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; Alias::value &lt;&lt; std::endl;  <span class="comment">// 输出 10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多个命名空间的合并：<br>多个命名空间可以通过使用作用域解析运算符<code>::</code>进行合并，以便在同一作用域内引用多个命名空间的实体。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> NamespaceA &#123;</span><br><span class="line">    <span class="type">int</span> valueA = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> NamespaceB &#123;</span><br><span class="line">    <span class="type">int</span> valueB = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> NamespaceA;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> NamespaceB;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; valueA &lt;&lt; std::endl;  <span class="comment">// 输出 10</span></span><br><span class="line">    std::cout &lt;&lt; valueB &lt;&lt; std::endl;  <span class="comment">// 输出 20</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>通过使用命名空间，可以将相关的实体组织在一起，提高代码的可读性和可维护性。它还允许在不同的库、模块和命名空间之间避免名称冲突，并支持更好的代码组织和模块化。</p><h2 id="6、重载"><a href="#6、重载" class="headerlink" title="6、重载"></a>6、重载</h2><p><strong>函数重载</strong>在<strong>同一个作用域</strong>内，可以声明几个功能类似的<strong>同名函数，</strong>但是这些同名函数的<strong>形式参数（指参数的个数、类型或者顺序）必须不同</strong>。您不能仅通过返回类型的不同来重载函数。</p><p><strong>运算符重载</strong>声明加法运算符用于把两个 Box 对象相加，返回最终的 Box 对象。大多数的重载运算符可被定义为普通的非成员函数或者被定义为类成员函数。如果我们定义上面的函数为类的非成员函数，那么我们需要为每次操作传递两个参数，如下所示：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Box <span class="keyword">operator</span>+(<span class="type">const</span> Box&amp;, <span class="type">const</span> Box&amp;);</span><br></pre></td></tr></table></figure><p> 运算符重载函数的函数名应该以<code>operator</code>关键字开始，后跟表示要重载的运算符的符号或名称。函数名的命名约定可以根据运算符的类型进行调整。</p><p>以下是常见运算符的命名约定：</p><ol><li><p>一元运算符（Unary Operators）：</p><ul><li>一元前缀运算符（如逻辑非、取反等）：<code>operator&lt;运算符符号&gt;()</code></li><li>一元后缀运算符（如后置递增、后置递减等）：<code>operator&lt;运算符符号&gt;(int)</code></li></ul></li><li><p>二元运算符（Binary Operators）：</p><ul><li>算术运算符（如加法、减法等）：<code>operator&lt;运算符符号&gt;(const T&amp;)</code></li><li>关系运算符（如等于、不等于等）：<code>operator&lt;运算符符号&gt;(const T&amp;)</code></li><li>逻辑运算符（如逻辑与、逻辑或等）：<code>operator&lt;运算符符号&gt;(const T&amp;)</code></li><li>赋值运算符：<code>operator&lt;运算符符号&gt;(const T&amp;)</code></li><li>下标运算符：<code>operator[](const T&amp;)</code></li><li>函数调用运算符：<code>operator()(const T&amp;)</code></li></ul></li></ol><p>请注意，<code>&lt;运算符符号&gt;</code>应替换为相应运算符的符号或名称。<code>const T&amp;</code>是表示参数类型的占位符，应根据实际情况替换为适当的类型。</p><p>以下是一个例子，展示如何命名常见运算符的重载函数：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 一元前缀递增运算符重载</span></span><br><span class="line">    MyClass&amp; <span class="keyword">operator</span>++();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一元后缀递增运算符重载</span></span><br><span class="line">    MyClass <span class="keyword">operator</span>++(<span class="type">int</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加法运算符重载</span></span><br><span class="line">    MyClass <span class="keyword">operator</span>+(<span class="type">const</span> MyClass&amp;) <span class="type">const</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关系运算符重载（相等）</span></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> MyClass&amp;) <span class="type">const</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 逻辑与运算符重载</span></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&amp;&amp;(<span class="type">const</span> MyClass&amp;) <span class="type">const</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 赋值运算符重载</span></span><br><span class="line">    MyClass&amp; <span class="keyword">operator</span>=(<span class="type">const</span> MyClass&amp;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下标运算符重载</span></span><br><span class="line">    <span class="type">int</span> <span class="keyword">operator</span>[](<span class="type">int</span>) <span class="type">const</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数调用运算符重载</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span>)</span> <span class="type">const</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过遵循这些命名约定，可以清晰地表达运算符重载函数的用途和意义，使代码更易读和理解。</p><h2 id="7、多态"><a href="#7、多态" class="headerlink" title="7、多态"></a>7、多态</h2><p><strong>多态</strong>按字面的意思就是多种形态。当类之间存在层次结构，并且类之间是通过继承关联时，就会用到多态。</p><p>C++ 多态意味着调用成员函数时，会根据调用函数的对象的类型来执行不同的函数。<em>**</em></p><p><strong>虚函数</strong> 是在基类中使用关键字 <strong>virtual</strong> 声明的函数。在派生类中重新定义基类中定义的虚函数时，会告诉编译器不要静态链接到该函数。</p><p>我们想要的是在程序中任意点可以根据所调用的对象类型来选择调用的函数，这种操作被称为<strong>动态链接</strong>，或<strong>后期绑定</strong>。</p><h2 id="8、数据抽象与数据封装"><a href="#8、数据抽象与数据封装" class="headerlink" title="8、数据抽象与数据封装"></a>8、数据抽象与数据封装</h2><p>所有的 C++ 程序都有以下两个基本要素：</p><ul><li><strong>程序语句（代码）：</strong>这是程序中执行动作的部分，它们被称为函数。</li><li><strong>程序数据：</strong>数据是程序的信息，会受到程序函数的影响。</li></ul><p>封装是面向对象编程中的把数据和操作数据的函数绑定在一起的一个概念，这样能避免受到外界的干扰和误用，从而确保了安全。数据封装引申出了另一个重要的 OOP 概念，即<strong>数据隐藏</strong>。</p><p><strong>数据封装</strong>是一种把数据和操作数据的函数捆绑在一起的机制，<strong>数据抽象</strong>是一种仅向用户暴露接口而把具体的实现细节隐藏起来的机制。</p><p>C++ 通过创建<strong>类</strong>来支持封装和数据隐藏（public、protected、private）。我们已经知道，类包含私有成员（private）、保护成员（protected）和公有成员（public）成员</p><h2 id="9、模板"><a href="#9、模板" class="headerlink" title="9、模板"></a>9、模板</h2><p>模板是C++中的一种编程机制，用于在编写通用代码时提供参数化的类型和算法。它可以让程序员编写不特定于具体类型的代码，以适用于多种不同的类型。</p><p>通过使用模板，可以定义通用的函数、类和数据结构，使它们能够适应不同的数据类型，而无需为每种数据类型编写单独的代码。模板在编译时进行实例化，根据具体的类型生成特定的代码。</p><p>C++中有两种主要类型的模板：</p><ol><li><p>函数模板（Function Templates）：<br>函数模板允许定义通用的函数，可以在不同的类型上进行操作。函数模板使用参数化类型（例如<code>T</code>）来表示通用类型，并在编译时实例化为特定的类型。使用尖括号<code>&lt;&gt;</code>来指定模板参数，并在函数定义或调用时提供实际的类型参数。</p><p>示例代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">max</span><span class="params">(T a, T b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a &gt; b) ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> result1 = <span class="built_in">max</span>(<span class="number">5</span>, <span class="number">10</span>);        <span class="comment">// 使用int类型实例化函数模板</span></span><br><span class="line">    <span class="type">double</span> result2 = <span class="built_in">max</span>(<span class="number">3.14</span>, <span class="number">2.71</span>); <span class="comment">// 使用double类型实例化函数模板</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>类模板（Class Templates）：<br>类模板允许定义通用的类，可以在不同的类型上实例化。类模板使用参数化类型（例如<code>T</code>）来表示通用类型，并在编译时实例化为特定的类型。使用尖括号<code>&lt;&gt;</code>来指定模板参数，并在类定义或对象实例化时提供实际的类型参数。</p><p>示例代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T data[<span class="number">100</span>];</span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        data[top++] = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data[--top];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Stack&lt;<span class="type">int</span>&gt; intStack;           <span class="comment">// 使用int类型实例化类模板</span></span><br><span class="line">    Stack&lt;<span class="type">double</span>&gt; doubleStack;     <span class="comment">// 使用double类型实例化类模板</span></span><br><span class="line">    intStack.<span class="built_in">push</span>(<span class="number">42</span>);</span><br><span class="line">    doubleStack.<span class="built_in">push</span>(<span class="number">3.14</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>通过使用函数模板和类模板，可以实现通用、灵活和可重用的代码，以适应不同的数据类型。模板是C++中强大的特性之一，它在标准库中广泛应用，例如STL（Standard Template Library）就是基于模板实现的。</p><h2 id="10、struct与class定义类的区别"><a href="#10、struct与class定义类的区别" class="headerlink" title="10、struct与class定义类的区别"></a>10、struct与class定义类的区别</h2><p>在C++中，<code>struct</code>和<code>class</code>关键字都可以用于定义类，它们在语义上有一些区别，但在大多数情况下用法是相似的。</p><p>主要的区别如下：</p><ol><li><p>默认访问级别：</p><ul><li><code>struct</code>：默认的访问级别是<code>public</code>，即结构体中的成员在外部是可访问的。</li><li><code>class</code>：默认的访问级别是<code>private</code>，即类中的成员在外部是不可访问的。</li></ul></li><li><p>继承方式：</p><ul><li><code>struct</code>：默认的继承方式是<code>public</code>继承，即结构体可以从其他结构体或类继承公共成员。</li><li><code>class</code>：默认的继承方式是<code>private</code>继承，即类可以从其他类继承成员，但这些成员在外部是不可访问的。</li></ul></li><li><p>成员和函数：</p><ul><li><code>struct</code>和<code>class</code>都可以包含成员变量、成员函数、构造函数、析构函数等。</li><li>成员函数的定义和使用方式在两者之间是相同的。</li></ul></li></ol><p>尽管在默认情况下有上述的区别，但是在实践中，可以通过显式指定访问级别和继承方式来覆盖这些默认行为。例如，在<code>struct</code>中显式声明<code>private</code>成员，或在<code>class</code>中使用<code>public</code>继承。</p><p>示例代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">MyStruct</span> &#123;</span><br><span class="line">    <span class="type">int</span> publicVar;   <span class="comment">// 默认为public</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">publicFunc</span><span class="params">()</span></span>;  <span class="comment">// 默认为public</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> privateVar;  <span class="comment">// 显式声明为private</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">privateFunc</span><span class="params">()</span></span>;  <span class="comment">// 显式声明为private</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> publicVar;   <span class="comment">// 默认为private</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">publicFunc</span><span class="params">()</span></span>;  <span class="comment">// 默认为private</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> privateVar;  <span class="comment">// 默认为private</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">privateFunc</span><span class="params">()</span></span>;  <span class="comment">// 默认为private</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyStruct s;</span><br><span class="line">    s.publicVar = <span class="number">42</span>;       <span class="comment">// 可以访问public成员</span></span><br><span class="line">    s.<span class="built_in">publicFunc</span>();         <span class="comment">// 可以调用public函数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// s.privateVar = 10;   // 错误，private成员不可访问</span></span><br><span class="line">    <span class="comment">// s.privateFunc();     // 错误，private函数不可调用</span></span><br><span class="line"></span><br><span class="line">    MyClass c;</span><br><span class="line">    c.publicVar = <span class="number">42</span>;       <span class="comment">// 可以访问public成员</span></span><br><span class="line">    c.<span class="built_in">publicFunc</span>();         <span class="comment">// 可以调用public函数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// c.privateVar = 10;   // 错误，private成员不可访问</span></span><br><span class="line">    <span class="comment">// c.privateFunc();     // 错误，private函数不可调用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抽象类不能直接实例化对象"><a href="#抽象类不能直接实例化对象" class="headerlink" title="抽象类不能直接实例化对象"></a>抽象类不能直接实例化对象</h2><p><strong>需要注意</strong>的是，除了上述的区别外，在使用类的成员时，<code>struct</code>和<code>class</code>是相同的。它们都可以用于定义数据结构、抽象数据类型、面向对象编程等。选择使用<code>struct</code>还是<code>class</code>主要取决于语义上的差异和个人偏好。</p><p>在给定的代码中，存在以下错误和问题：</p><ol><li><p>类 <code>B</code> 中的函数 <code>f()</code> 被声明为纯虚函数，即 <code>virtual void f() = 0;</code>。这将使类 <code>B</code> 变为一个抽象类，无法直接实例化对象。</p></li><li><p>在函数 <code>f()</code> 中，尝试创建 <code>B</code> 类的对象 <code>b</code> 是错误的，因为 <code>B</code> 是一个抽象类，不能直接实例化对象。</p></li></ol><p>以下是修正后的代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 错误：无法直接实例化抽象类 B 的对象</span></span><br><span class="line">    <span class="comment">// B b;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修正后的代码中，函数 <code>f()</code> 中的错误部分被注释掉了。主函数 <code>main()</code> 为空，因为当前代码没有其他操作。</p><p>在修正后的代码中，<code>B</code> 类成为一个抽象类，由于它包含纯虚函数 <code>f()</code>。抽象类不能直接实例化对象，而是被用作其他派生类的基类，派生类需要实现纯虚函数 <code>f()</code>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;http://xxx/aplayer.min.css&quot;&gt;&lt;script src=&quot;http://xxx/aplayer.min.js&quot; clas</summary>
      
    
    
    
    <category term="复习" scheme="http://example.com/categories/%E5%A4%8D%E4%B9%A0/"/>
    
    <category term="c++" scheme="http://example.com/categories/%E5%A4%8D%E4%B9%A0/c/"/>
    
    
    <category term="复习" scheme="http://example.com/tags/%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Elevator</title>
    <link href="http://example.com/2023/06/08/Elevator/"/>
    <id>http://example.com/2023/06/08/Elevator/</id>
    <published>2023-06-08T05:38:00.000Z</published>
    <updated>2024-03-26T02:10:27.386Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MIN_FLOORS = <span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_FLOORS = <span class="number">40</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MIN_PASSENGERS = <span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_PASSENGERS = <span class="number">1000</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MIN_MINUTES = <span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_MINUTES = <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MIN_CAPACITY = <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_CAPACITY = <span class="number">18</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MIN_SPEED = <span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_SPEED = <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MIN_WAIT_TIME = <span class="number">2</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_WAIT_TIME = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Elevator</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">int</span> capacity;</span><br><span class="line">    <span class="type">int</span> floor;</span><br><span class="line">    <span class="type">int</span> direction; <span class="comment">// 0表示空闲，1表示上，-1表示下</span></span><br><span class="line">    <span class="type">int</span> maxCapacity;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Elevator</span>(<span class="type">int</span> id, <span class="type">int</span> capacity) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;id = id;</span><br><span class="line">        <span class="keyword">this</span>-&gt;capacity = capacity;</span><br><span class="line">        <span class="keyword">this</span>-&gt;floor = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;direction = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;maxCapacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getFloor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> floor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getDirection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> direction;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getCapacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setDirection</span><span class="params">(<span class="type">int</span> dir)</span> </span>&#123;</span><br><span class="line">        direction = dir;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> capacity == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">enter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        capacity--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">exit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        capacity++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        floor += direction;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">changeDirection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        direction *= <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isIdle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> direction == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isAtFloor</span><span class="params">(<span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> floor == f;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        string dir;</span><br><span class="line">        <span class="keyword">if</span> (direction == <span class="number">0</span>)</span><br><span class="line">            dir = <span class="string">&quot;Idle&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (direction == <span class="number">1</span>)</span><br><span class="line">            dir = <span class="string">&quot;Up&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            dir = <span class="string">&quot;Down&quot;</span>;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Elevator &quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot;: Status - &quot;</span> &lt;&lt; dir &lt;&lt; <span class="string">&quot;, Floor - &quot;</span> &lt;&lt; floor &lt;&lt; <span class="string">&quot;, Capacity - &quot;</span> &lt;&lt; (maxCapacity - capacity) &lt;&lt; <span class="string">&quot;/&quot;</span> &lt;&lt; maxCapacity &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Passenger</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">int</span> destination;</span><br><span class="line">    <span class="type">int</span> requestFloor;</span><br><span class="line">    <span class="type">int</span> requestElevator;</span><br><span class="line">    <span class="type">int</span> L; <span class="comment">// 乘客乘坐电梯的次数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Passenger</span>(<span class="type">int</span> id, <span class="type">int</span> destination) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;id = id;</span><br><span class="line">        <span class="keyword">this</span>-&gt;destination = destination;</span><br><span class="line">        <span class="keyword">this</span>-&gt;L = <span class="built_in">getRandomL</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Passenger</span>(<span class="type">int</span> id, <span class="type">int</span> destination, <span class="type">int</span> requestFloor, <span class="type">int</span> requestElevator) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;id = id;</span><br><span class="line">        <span class="keyword">this</span>-&gt;destination = destination;</span><br><span class="line">        <span class="keyword">this</span>-&gt;requestFloor = requestFloor;</span><br><span class="line">        <span class="keyword">this</span>-&gt;requestElevator = requestElevator;</span><br><span class="line">        <span class="keyword">this</span>-&gt;L = <span class="built_in">getRandomL</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getDestination</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> destination;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getRequestFloor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> requestFloor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getRequestElevator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> requestElevator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getL</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> L;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">decrementL</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        L--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getRandomL</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="type">static</span> default_random_engine <span class="title">engine</span><span class="params">(<span class="keyword">static_cast</span>&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt;(time(<span class="number">0</span>)))</span></span>;</span><br><span class="line">        <span class="function">uniform_int_distribution&lt;<span class="type">int</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&gt; <span class="title">dist_L</span><span class="params">(<span class="number">1</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dist_L</span>(engine);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*这段代码定义了一个名为 `Simulation` 的类，用于实现电梯仿真。现在我们逐段解析它的实现细节：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. 构造函数 `Simulation()`：</span></span><br><span class="line"><span class="comment">   - 接收输入参数，包括楼层数量 `numFloors`、乘客数量 `numPassengers`、仿真时间 `simulationTime`、电梯最大乘客容量 `maxCapacity`、电梯运行速度 `elevatorSpeed` 和乘客等待时间 `waitTime`。</span></span><br><span class="line"><span class="comment">   - 初始化了类的私有成员变量，包括将输入参数赋值给对应的成员变量，以及对电梯、目标楼层和乘客到达状态进行初始化。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2. `generatePassengers()` 函数：</span></span><br><span class="line"><span class="comment">   - 使用随机数生成器和分布函数生成乘客的目标楼层、请求楼层和请求电梯。</span></span><br><span class="line"><span class="comment">   - 创建 `Passenger` 对象，并将其添加到 `passengers` 队列中，同时将目标楼层添加到对应电梯的 `passengerDestinations` 向量中，并将乘客的到达状态设置为未到达。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3. `calculateTravelTime()` 函数：</span></span><br><span class="line"><span class="comment">   - 根据给定的起始楼层和目标楼层计算乘客在电梯内移动所需的时间。</span></span><br><span class="line"><span class="comment">   - 计算公式为乘客所需楼层之差的绝对值乘以电梯速度。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4. `simulate()` 函数：</span></span><br><span class="line"><span class="comment">   - 执行整个电梯仿真过程。</span></span><br><span class="line"><span class="comment">   - 首先调用 `generatePassengers()` 函数生成随机的乘客。</span></span><br><span class="line"><span class="comment">   - 在仿真过程中，每个时间步骤中的每个电梯都会执行一系列操作：</span></span><br><span class="line"><span class="comment">     - 检查电梯是否空闲，如果不为空闲，则判断当前乘客目标楼层与电梯位置的关系，并设置电梯运行方向。</span></span><br><span class="line"><span class="comment">     - 如果电梯为空闲并且有乘客目标楼层，检查电梯是否到达目标楼层，并进行相应的操作。</span></span><br><span class="line"><span class="comment">     - 如果电梯不为空闲，则执行电梯的运动操作，并检查是否到达首层或顶层以及乘客目标楼层，并进行相应的操作。</span></span><br><span class="line"><span class="comment">     - 检查乘客目标楼层是否可以在等待时间内到达，如果可以，则乘客进入电梯，并更新乘客目标楼层的列表。</span></span><br><span class="line"><span class="comment">     - 检查乘客请求的电梯是否与当前电梯匹配，如果匹配，则乘客进入电梯，并从乘客队列中移除乘客。</span></span><br><span class="line"><span class="comment">     - 如果电梯已满，则打印电梯已满的消息。</span></span><br><span class="line"><span class="comment">     - 打印电梯的状态。</span></span><br><span class="line"><span class="comment">   -</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 在每个时间步骤结束后，检查所有乘客是否已经到达目标楼层，如果全部到达，则结束仿真过程。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">这段代码实现了一个简单的电梯仿真模拟，通过随机生成乘客和控制电梯的运行逻辑，模拟了电梯系统的运行过程。*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Simulation</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> numFloors;</span><br><span class="line">    <span class="type">int</span> numPassengers;</span><br><span class="line">    <span class="type">int</span> simulationTime;</span><br><span class="line">    <span class="type">int</span> maxCapacity;</span><br><span class="line">    <span class="type">int</span> elevatorSpeed;</span><br><span class="line">    <span class="type">int</span> waitTime;</span><br><span class="line">    vector&lt;Elevator&gt; elevators;</span><br><span class="line">    queue&lt;Passenger&gt; passengers;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; passengerDestinations;</span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; passengersArrived;</span><br><span class="line">    <span class="type">int</span> currentTime;</span><br><span class="line"><span class="comment">/*这几个变量的作用如下：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">- `numFloors`：表示电梯系统中的楼层数量。</span></span><br><span class="line"><span class="comment">- `numPassengers`：表示生成的乘客数量。</span></span><br><span class="line"><span class="comment">- `simulationTime`：表示模拟的总时间。</span></span><br><span class="line"><span class="comment">- `maxCapacity`：表示每部电梯的最大乘客容量。</span></span><br><span class="line"><span class="comment">- `elevatorSpeed`：表示电梯的移动速度。</span></span><br><span class="line"><span class="comment">- `waitTime`：表示乘客在到达目标楼层后停留的等待时间。</span></span><br><span class="line"><span class="comment">- `elevators`：表示电梯对象的向量，存储系统中的所有电梯。</span></span><br><span class="line"><span class="comment">- `passengers`：表示乘客对象的队列，存储待处理的乘客。</span></span><br><span class="line"><span class="comment">- `passengerDestinations`：表示每部电梯中乘客的目标楼层，为二维向量。</span></span><br><span class="line"><span class="comment">- `passengersArrived`：表示乘客到达目的地的状态，为布尔值的向量。</span></span><br><span class="line"><span class="comment">- `currentTime`：表示当前的模拟时间。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">这些变量在电梯模拟系统中用于存储和跟踪电梯、乘客和模拟时间的状态和信息，以便进行模拟运行和相关计算。*/</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">generatePassengers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function">default_random_engine <span class="title">engine</span><span class="params">(<span class="keyword">static_cast</span>&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt;(time(<span class="number">0</span>)))</span></span>;</span><br><span class="line">        <span class="function">uniform_int_distribution&lt;<span class="type">int</span>&gt; <span class="title">dist_floor</span><span class="params">(MIN_FLOORS, numFloors)</span></span>;</span><br><span class="line">        <span class="function">uniform_int_distribution&lt;<span class="type">int</span>&gt; <span class="title">dist_destination</span><span class="params">(MIN_FLOORS, numFloors)</span></span>;</span><br><span class="line">        <span class="function">uniform_int_distribution&lt;<span class="type">int</span>&gt; <span class="title">dist_elevator</span><span class="params">(<span class="number">0</span>, elevators.size() - <span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numPassengers; i++) &#123;</span><br><span class="line">            <span class="type">int</span> destFloor = <span class="built_in">dist_destination</span>(engine);</span><br><span class="line">            <span class="type">int</span> reqFloor = <span class="built_in">dist_floor</span>(engine);</span><br><span class="line">            <span class="type">int</span> reqElevator = <span class="built_in">dist_elevator</span>(engine);</span><br><span class="line"></span><br><span class="line">            <span class="function">Passenger <span class="title">passenger</span><span class="params">(i + <span class="number">1</span>, destFloor, reqFloor, reqElevator)</span></span>;</span><br><span class="line">            passengers.<span class="built_in">push</span>(passenger);</span><br><span class="line">            passengerDestinations[reqElevator].<span class="built_in">push_back</span>(destFloor);</span><br><span class="line">            passengersArrived[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">calculateTravelTime</span><span class="params">(<span class="type">int</span> floor1, <span class="type">int</span> floor2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(floor1 - floor2) * elevatorSpeed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Simulation</span>(<span class="type">int</span> numFloors, <span class="type">int</span> numPassengers, <span class="type">int</span> simulationTime, <span class="type">int</span> maxCapacity, <span class="type">int</span> elevatorSpeed, <span class="type">int</span> waitTime) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;numFloors = numFloors;</span><br><span class="line">        <span class="keyword">this</span>-&gt;numPassengers = numPassengers;</span><br><span class="line">        <span class="keyword">this</span>-&gt;simulationTime = simulationTime;</span><br><span class="line">        <span class="keyword">this</span>-&gt;maxCapacity = maxCapacity;</span><br><span class="line">        <span class="keyword">this</span>-&gt;elevatorSpeed = elevatorSpeed;</span><br><span class="line">        <span class="keyword">this</span>-&gt;waitTime = waitTime;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="function">Elevator <span class="title">elevator</span><span class="params">(i + <span class="number">1</span>, maxCapacity)</span></span>;</span><br><span class="line">            elevators.<span class="built_in">push_back</span>(elevator);</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; destinations;</span><br><span class="line">            passengerDestinations.<span class="built_in">push_back</span>(destinations);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        passengersArrived.<span class="built_in">resize</span>(numPassengers, <span class="literal">false</span>);</span><br><span class="line">        currentTime = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">simulate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">generatePassengers</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (currentTime &lt; simulationTime) &#123;</span><br><span class="line">            currentTime++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; elevators.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                Elevator&amp; elevator = elevators[i];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (elevator.<span class="built_in">isIdle</span>()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!passengerDestinations[i].<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                        <span class="type">int</span> destFloor = passengerDestinations[i].<span class="built_in">front</span>();</span><br><span class="line">                        <span class="keyword">if</span> (destFloor &gt; elevator.<span class="built_in">getFloor</span>())</span><br><span class="line">                            elevator.<span class="built_in">setDirection</span>(<span class="number">1</span>);</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (destFloor &lt; elevator.<span class="built_in">getFloor</span>())</span><br><span class="line">                            elevator.<span class="built_in">setDirection</span>(<span class="number">-1</span>);</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            elevator.<span class="built_in">setDirection</span>(<span class="number">0</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (elevator.<span class="built_in">isIdle</span>() &amp;&amp; !passengerDestinations[i].<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                    <span class="type">int</span> destFloor = passengerDestinations[i].<span class="built_in">front</span>();</span><br><span class="line">                    <span class="keyword">if</span> (elevator.<span class="built_in">isAtFloor</span>(destFloor)) &#123;</span><br><span class="line">                        elevator.<span class="built_in">setDirection</span>(<span class="number">0</span>);</span><br><span class="line">                        passengerDestinations[i].<span class="built_in">erase</span>(passengerDestinations[i].<span class="built_in">begin</span>());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!elevator.<span class="built_in">isIdle</span>()) &#123;</span><br><span class="line">                    elevator.<span class="built_in">move</span>();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (elevator.<span class="built_in">isAtFloor</span>(<span class="number">1</span>))</span><br><span class="line">                        elevator.<span class="built_in">setDirection</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (elevator.<span class="built_in">isAtFloor</span>(numFloors))</span><br><span class="line">                        elevator.<span class="built_in">setDirection</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!passengerDestinations[i].<span class="built_in">empty</span>() &amp;&amp; elevator.<span class="built_in">isAtFloor</span>(passengerDestinations[i].<span class="built_in">front</span>())) &#123;</span><br><span class="line">                        elevator.<span class="built_in">setDirection</span>(<span class="number">0</span>);</span><br><span class="line">                        passengerDestinations[i].<span class="built_in">erase</span>(passengerDestinations[i].<span class="built_in">begin</span>());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = </span><br><span class="line"></span><br><span class="line"><span class="number">0</span>; j &lt; passengerDestinations[i].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                    <span class="type">int</span> destFloor = passengerDestinations[i][j];</span><br><span class="line">                    <span class="type">int</span> travelTime = <span class="built_in">calculateTravelTime</span>(elevator.<span class="built_in">getFloor</span>(), destFloor);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (travelTime &lt;= waitTime) &#123;</span><br><span class="line">                        elevator.<span class="built_in">enter</span>();</span><br><span class="line">                        passengerDestinations[i].<span class="built_in">erase</span>(passengerDestinations[i].<span class="built_in">begin</span>() + j);</span><br><span class="line">                        j--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; elevator.<span class="built_in">getCapacity</span>(); j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (passengers.<span class="built_in">empty</span>())</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                    Passenger passenger = passengers.<span class="built_in">front</span>();</span><br><span class="line">                    <span class="keyword">if</span> (passenger.<span class="built_in">getRequestElevator</span>() == elevator.<span class="built_in">getId</span>()) &#123;</span><br><span class="line">                        elevator.<span class="built_in">enter</span>();</span><br><span class="line">                        passengers.<span class="built_in">pop</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (elevator.<span class="built_in">isFull</span>()) &#123;</span><br><span class="line">                    cout &lt;&lt; <span class="string">&quot;Elevator &quot;</span> &lt;&lt; elevator.<span class="built_in">getId</span>() &lt;&lt; <span class="string">&quot; is full!&quot;</span> &lt;&lt; endl;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                elevator.<span class="built_in">printStatus</span>();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Current Time: &quot;</span> &lt;&lt; currentTime &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">            <span class="type">bool</span> allArrived = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; passengersArrived.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!passengersArrived[i]) &#123;</span><br><span class="line">                    allArrived = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (allArrived)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;--------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> numFloors = <span class="number">40</span>;</span><br><span class="line">    <span class="type">int</span> numPassengers = <span class="number">50</span>;</span><br><span class="line">    <span class="type">int</span> simulationTime = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> maxCapacity = <span class="number">15</span>;</span><br><span class="line">    <span class="type">int</span> elevatorSpeed = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> waitTime = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Simulation <span class="title">sim</span><span class="params">(numFloors, numPassengers, simulationTime, maxCapacity, elevatorSpeed, waitTime)</span></span>;</span><br><span class="line">    sim.<span class="built_in">simulate</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">这段代码进行了以下修改：</span><br><span class="line">- 添加了`<span class="function">uniform_int_distribution&lt;<span class="type">int</span>&gt; <span class="title">dist_L</span><span class="params">(<span class="number">1</span>, <span class="number">10</span>)</span></span>;`，用于生成每位乘客乘坐电梯的次数L。</span><br><span class="line">- 在`<span class="built_in">generatePassengers</span>()`函数中，根据生成的L值，在乘客对象中添加了`<span class="type">int</span> numTrips`属性，用于追踪乘客已乘坐电梯的次数。</span><br><span class="line">- 修改了`<span class="built_in">generatePassengers</span>()`函数中的逻辑，根据生成的L值确定每位乘客的电梯乘坐次数，并在达到指定楼层后随机停留一段时间并选择另一楼层继续乘坐电梯。</span><br><span class="line">- 在`Simulation`类中添加了`<span class="built_in">calculateWaitTime</span>()`函数，用于生成每位乘客停留的随机等待时间。</span><br><span class="line">- 修改了`<span class="built_in">simulate</span>()`函数，使乘客在达到指定楼层后随机停留一段时间并选择另一楼层继续乘坐电梯。</span><br><span class="line"></span><br><span class="line">请注意，代码可能需要进一步优化和调试，以满足你的需求。</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;http://xxx/aplayer.min.css&quot;&gt;&lt;script src=&quot;http://xxx/aplayer.min.js&quot; clas</summary>
      
    
    
    
    <category term="实验" scheme="http://example.com/categories/%E5%AE%9E%E9%AA%8C/"/>
    
    <category term="程序设计实验" scheme="http://example.com/categories/%E5%AE%9E%E9%AA%8C/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="实验" scheme="http://example.com/tags/%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>OS简单题专题</title>
    <link href="http://example.com/2023/05/27/OS/"/>
    <id>http://example.com/2023/05/27/OS/</id>
    <published>2023-05-27T02:25:02.494Z</published>
    <updated>2024-03-26T02:12:03.713Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><h1 id="操作系统上机题目"><a href="#操作系统上机题目" class="headerlink" title="操作系统上机题目"></a>操作系统上机题目</h1><h2 id="简单题目第一题"><a href="#简单题目第一题" class="headerlink" title="简单题目第一题"></a>简单题目第一题</h2><p>第一版shell代码没有完成生成新的shell的任务</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">read</span> -p <span class="string">&quot;请输入你的名字: &quot;</span> name</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;你的名字是： <span class="variable">$name</span>&quot;</span></span></span><br><span class="line">read -p &quot;请输入文件名称: &quot; filename</span><br><span class="line">if [ -z &quot;$filename&quot; ]; then</span><br><span class="line">        echo &quot;输入参数为空&quot;</span><br><span class="line">        exit 1</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">判断文件夹中是否有学号</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="keyword">if</span> [ -s <span class="string">&quot;filename&quot;</span> ];<span class="keyword">then</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">      ead -p <span class="string">&quot;输入你的学号: &quot;</span> text</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">      <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$text</span>&quot;</span> &gt;&gt; <span class="string">&quot;<span class="variable">$filename</span>&quot;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;1 view the file &quot;</span></span></span><br><span class="line">echo &quot;2 writer the file&quot;</span><br><span class="line">echo &quot;3 clean the file&quot;</span><br><span class="line">read -p &quot;enter your choice: &quot; choice</span><br><span class="line">case $choice in</span><br><span class="line">        1)</span><br><span class="line">                cat &quot;$filename&quot;</span><br><span class="line">                ;;</span><br><span class="line">        2)</span><br><span class="line">                read -p  &quot;请输入你的学号: &quot; test</span><br><span class="line">                echo &quot;$test&quot; &gt;&gt; &quot;$filename&quot;</span><br><span class="line">                ;;</span><br><span class="line">        3)</span><br><span class="line">                cat /dev/null &gt; $filename</span><br><span class="line">                ;;</span><br><span class="line">        *)</span><br><span class="line">                echo &quot;请重试&quot;</span><br><span class="line">                ;;</span><br><span class="line">esac</span><br><span class="line">echo &quot;Filename: $filename&quot;</span><br><span class="line">cat &quot;$filename&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第二版解决la</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">touch new_script.sh</span><br><span class="line">cat &lt;&lt; EOF &gt; new_script.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">read -p &quot;请输入文件名称: &quot; filename</span><br><span class="line">if [ -z &quot;\$filename&quot; ]; then</span><br><span class="line">        echo &quot;输入参数为空&quot;</span><br><span class="line">        exit 1</span><br><span class="line">fi</span><br><span class="line">echo &quot;1 view the file &quot;</span><br><span class="line">echo &quot;2 writer the file&quot;</span><br><span class="line">echo &quot;3 clean the file&quot;</span><br><span class="line">read -p &quot;enter your choice: &quot; choice</span><br><span class="line">case \$choice in</span><br><span class="line">        1)</span><br><span class="line">                cat &quot;\$filename&quot;</span><br><span class="line">                ;;</span><br><span class="line">        2)</span><br><span class="line">                read -p  &quot;请输入你的学号: &quot; test</span><br><span class="line">                echo &quot;\$test&quot; &gt;&gt; &quot;\$filename&quot;</span><br><span class="line">                ;;</span><br><span class="line">        3)</span><br><span class="line">                cat /dev/null &gt; \$filename</span><br><span class="line">                ;;</span><br><span class="line">        *)</span><br><span class="line">                echo &quot;请重试&quot;</span><br><span class="line">                ;;</span><br><span class="line">esac</span><br><span class="line">echo &quot;Filename: \$filename&quot;</span><br><span class="line">cat &quot;\$filename&quot;</span><br><span class="line">EOF</span><br><span class="line">chmod +x new_script.sh</span><br><span class="line">./new_script.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意</strong>遇到了在新生成文件中，识别不了“filename”的情况，需要加上”/“注释符，这是在用cat时需要注意的问题。</p><h2 id="简单题目第二题"><a href="#简单题目第二题" class="headerlink" title="简单题目第二题"></a>简单题目第二题</h2><h4 id="系统调用编程"><a href="#系统调用编程" class="headerlink" title="系统调用编程"></a>系统调用编程</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(argc!=<span class="number">3</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入错误&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">&#125;</span><br><span class="line">FILE *file;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="type">char</span> buffer[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="number">2</span>],<span class="string">&quot;r&quot;</span>)==<span class="number">0</span>)&#123;<span class="comment">//读取文件</span></span><br><span class="line">file=fopen(argv[<span class="number">1</span>],<span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(file==<span class="literal">NULL</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;Error opening input file&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>((c=fgetc(file))!=EOF)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c);</span><br><span class="line">&#125;</span><br><span class="line">fclose(file);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="number">2</span>],<span class="string">&quot;w&quot;</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">file=fopen(argv[<span class="number">1</span>],<span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(file==<span class="literal">NULL</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;Error opening input file&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please input your text:\n&quot;</span>);</span><br><span class="line">fgets(buffer,<span class="keyword">sizeof</span>(buffer),<span class="built_in">stdin</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(file,<span class="string">&quot;%s&quot;</span>,buffer);<span class="comment">//将输入内容写入文件</span></span><br><span class="line">fclose(file);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;错误&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(argc!=<span class="number">3</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入错误&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">FILE *file;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="type">char</span> buffer[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="number">2</span>],<span class="string">&quot;r&quot;</span>)==<span class="number">0</span>)&#123;<span class="comment">//读取文件</span></span><br><span class="line">file=fopen(argv[<span class="number">1</span>],<span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(file==<span class="literal">NULL</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;Error opening input file&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>((c=fgetc(file))!=EOF)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c);</span><br><span class="line">&#125;</span><br><span class="line">fclose(file);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="number">2</span>],<span class="string">&quot;w&quot;</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">file=fopen(argv[<span class="number">1</span>],<span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(file==<span class="literal">NULL</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;Error opening input file&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please input your text:\n&quot;</span>);</span><br><span class="line">fgets(buffer,<span class="keyword">sizeof</span>(buffer),<span class="built_in">stdin</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(file,<span class="string">&quot;%s&quot;</span>,buffer);<span class="comment">//将输入内容写入文件</span></span><br><span class="line">fclose(file);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;错误&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mutex作为信号量</p><h3 id="Strict-Alternation"><a href="#Strict-Alternation" class="headerlink" title="Strict Alternation"></a>Strict Alternation</h3><p>算法思想</p><blockquote><p>Turn Variable或Strict Alternation Approach是在用户模式下实现的软件机制。 这是一个繁忙的等待解决方案，只能为两个进程实施。 在这种方法中，使用实际上是锁的转弯变量。</p><p>这种方法只能用于两个进程。 一般来说，让两个进程是:Pi和Pj。 它们共享一个称为转变量的变量。 程序的伪代码可以给出如下。</p><p><strong>对于进程Pi</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Non - CS   </span><br><span class="line">while (turn ! = i);   </span><br><span class="line">Critical Section   </span><br><span class="line">turn = j;   </span><br><span class="line">Non - CS</span><br></pre></td></tr></table></figure><p>对于进程Pj</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Non - CS   </span><br><span class="line">while (turn ! = j);  </span><br><span class="line">Critical Section   </span><br><span class="line">turn = i ;  </span><br><span class="line">Non - CS</span><br></pre></td></tr></table></figure><p>锁变量方法的实际问题是只有当锁变量为1时进程才进入临界区。不止一个进程可以同时看到锁变量为1，因此互斥不能得到保证。</p><p>这个问题在转向变量方法中得到解决。 现在，只有当转向变量的值等于进程的PID时，进程才能进入临界区。</p><p>只有两个可能的值是可变的，i或j。 如果它的值不是i，那么肯定会是j，反之亦然。</p><p>在入口部分，一般来说，进程Pi不会进入临界区，直到它的值为j，或者进程Pj将不会进入临界区，直到其值为i。</p><p>最初，两个进程Pi和Pj可用并且想要执行到临界区。</p><p>来源：BootWiki<br>链接：<a href="https://www.bootwiki/os/os-turn-variable-or-strict-alternation-approach.html">https://www.bootwiki/os/os-turn-variable-or-strict-alternation-approach.html</a><br>著作权归作者所有<br>商业转载请联系作者获得授权，非商业转载请注明出处</p></blockquote><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> *turn=<span class="string">&quot;NULL&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(argc!=<span class="number">3</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入错误&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> *filename=argv[<span class="number">1</span>];</span><br><span class="line"><span class="type">char</span> *turn=argv[<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> fd=open(filename,O_WRONLY | O_CREAT |O_APPEND,S_IRUSR |S_IWUSR);</span><br><span class="line"><span class="keyword">if</span>(fd==<span class="number">-1</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;Error opening!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(turn,<span class="string">&quot;PROC1&quot;</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">turn=<span class="string">&quot;NULL&quot;</span>;</span><br><span class="line"><span class="type">char</span> buffer[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">sprintf</span>(buffer,<span class="string">&quot;后3位学号为403PROC1MYFILE1\n&quot;</span>);</span><br><span class="line">write(fd,buffer,<span class="built_in">strlen</span>(buffer));</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(turn,<span class="string">&quot;PROC2&quot;</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">turn=<span class="string">&quot;NULL&quot;</span>;</span><br><span class="line"><span class="type">char</span> buffer[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">sprintf</span>(buffer,<span class="string">&quot;后3位学号为403PROC2MYFILE2\n&quot;</span>);</span><br><span class="line">write(fd,buffer,<span class="built_in">strlen</span>(buffer));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;不能识别此模式&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">close(fd);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="此代码段中，我将char-turn作为边界，只有当turn值为“PROC1”或者“PROC2“时分别进入相应进程执行其任务。"><a href="#此代码段中，我将char-turn作为边界，只有当turn值为“PROC1”或者“PROC2“时分别进入相应进程执行其任务。" class="headerlink" title="此代码段中，我将char *turn作为边界，只有当turn值为“PROC1”或者“PROC2“时分别进入相应进程执行其任务。"></a>此代码段中，我将char *turn作为边界，只有当turn值为“PROC1”或者“PROC2“时分别进入相应进程执行其任务。</h6><h2 id="简单题目第三题"><a href="#简单题目第三题" class="headerlink" title="简单题目第三题"></a>简单题目第三题</h2><p>加油！</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=4237923&auto=1&height=66"></iframe><h2 id="简单题目第四题"><a href="#简单题目第四题" class="headerlink" title="简单题目第四题"></a>简单题目第四题</h2><p>首先创建设备驱动名</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/uaccess.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于 ioctl 命令</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RW_CLEAR 0x909090</span></span><br><span class="line"><span class="comment">// 设备名称</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEVICE_NAME <span class="string">&quot;rwbuf&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓冲区最大长度</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RWBUF_MAX_SIZE 1024</span></span><br><span class="line"><span class="comment">// 当前缓冲区长度，注意设置为 12 是因为要求在内核模块安装完成之后需要立刻能读出学号</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> rwlen = <span class="number">12</span>;</span><br><span class="line"><span class="comment">// 缓冲区，初始值需要是学号以便能在设备安装后立刻读出</span></span><br><span class="line"><span class="type">static</span> <span class="type">char</span> rwbuf[RWBUF_MAX_SIZE] = <span class="string">&quot;403&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 锁机制，保证只能有一个打开的设备。0 为未打开，1 为已打开</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> inuse = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打开设备</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @return 0 表示成功，-1 表示失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">rwbuf_open</span><span class="params">(<span class="keyword">struct</span> inode *inode, <span class="keyword">struct</span> file *file)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (inuse == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        inuse = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// increase the use count in struct module</span></span><br><span class="line">        try_module_get(THIS_MODULE);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关闭设备</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @return 0 表示成功 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">rwbuf_release</span><span class="params">(<span class="keyword">struct</span> inode *inode, <span class="keyword">struct</span> file *file)</span></span><br><span class="line">&#123;</span><br><span class="line">    inuse = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// decrease the use count in struct module</span></span><br><span class="line">    module_put(THIS_MODULE);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从设备中读取内容</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param buf 存放读取内容的缓冲区</span></span><br><span class="line"><span class="comment"> * @return 正数表示成功，-1 表示错误 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">rwbuf_read</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="type">char</span> *buf, <span class="type">size_t</span> count, <span class="type">loff_t</span> *f_pos)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (rwlen &gt; <span class="number">0</span> &amp;&amp; rwlen &lt;= RWBUF_MAX_SIZE)</span><br><span class="line">    &#123;</span><br><span class="line">        copy_to_user(buf, rwbuf, count);</span><br><span class="line">        printk(<span class="string">&quot;[rwbuf] Read successful. After reading, rwlen = %d\n&quot;</span>, rwlen);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        printk(<span class="string">&quot;[rwbuf] Read failed. rwlen = %d\n&quot;</span>, rwlen);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将内容写入到设备</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param buf 存放待写入内容的缓冲区</span></span><br><span class="line"><span class="comment"> * @return 正数表示成功，-1 表示错误 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">rwbuf_write</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="type">const</span> <span class="type">char</span> *buf, <span class="type">size_t</span> count, <span class="type">loff_t</span> *f_pos)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        copy_from_user(rwbuf, buf, count &gt; RWBUF_MAX_SIZE ? RWBUF_MAX_SIZE : count);</span><br><span class="line">        rwlen = count &gt; RWBUF_MAX_SIZE ? RWBUF_MAX_SIZE : count;</span><br><span class="line">        printk(<span class="string">&quot;[rwbuf] Write successful. After writing, rwlen = %d\n&quot;</span>, rwlen);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        printk(<span class="string">&quot;[rwbuf] Writ![2@WNF_MDG)&#125;X_ZHQ&#125;H08AK2](/home/dashuai/下载/2@WNF_MDG)e failed. Length of string to be written = %lu\n&quot;</span>, count);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ioctl 操作</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param arg 要执行的操作</span></span><br><span class="line"><span class="comment"> * @return 0 表示成功，-1 表示错误 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">long</span> <span class="title function_">rwbuf_ioctl</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">unsigned</span> <span class="type">long</span> arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;[rwbuf] [RW_CLEAR:%x],[cmd:%x]\n&quot;</span>, RW_CLEAR, cmd);</span><br><span class="line">    <span class="keyword">if</span> (cmd == RW_CLEAR) <span class="comment">// 清空缓冲区</span></span><br><span class="line">    &#123;</span><br><span class="line">        rwlen = <span class="number">0</span>;</span><br><span class="line">        printk(<span class="string">&quot;[rwbuf] Do ioctl successful. After doing ioctl, rwlen = %d\n&quot;</span>, rwlen);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">// 无效命令</span></span><br><span class="line">    &#123;</span><br><span class="line">        printk(<span class="string">&quot;[rwbuf] Do ioctl failed. rwlen = %d\n&quot;</span>, rwlen);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">rwbuf_fops</span> =</span></span><br><span class="line">    &#123;</span><br><span class="line">        open : rwbuf_open,</span><br><span class="line">        release : rwbuf_release,</span><br><span class="line">        read : rwbuf_read,</span><br><span class="line">        write : rwbuf_write,</span><br><span class="line">        unlocked_ioctl : rwbuf_ioctl</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">rwbuf_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">-1</span>;</span><br><span class="line">    printk(<span class="string">&quot;[rwbuf] Initializing device...\n&quot;</span>);</span><br><span class="line">    <span class="comment">// 60: 主设备号，与创建 /dev/rwbuf 时使用的对应</span></span><br><span class="line">    <span class="comment">// DEVICE_NAME: 上面定义的设备名称</span></span><br><span class="line">    <span class="comment">// &amp;rwbuf_fops: VFS 相关</span></span><br><span class="line">    ret = register_chrdev(<span class="number">60</span>, DEVICE_NAME, &amp;rwbuf_fops);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">-1</span>)</span><br><span class="line">        printk(<span class="string">&quot;[rwbuf] Initialize successful\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        printk(<span class="string">&quot;[rwbuf] Initialize failed\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __exit <span class="title function_">rwbuf_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    unregister_chrdev(<span class="number">60</span>, DEVICE_NAME);</span><br><span class="line">    printk(<span class="string">&quot;[rwbuf] Uninstall successful\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(rwbuf_init);</span><br><span class="line">module_exit(rwbuf_exit);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure><p>再创建Makefile文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">obj-m := rwbuf.o//次文件应该与设备驱动名称相同</span><br><span class="line">KERNELDIR := /lib/modules/$(shell uname -r)/build</span><br><span class="line">PWD := $(shell pwd)</span><br><span class="line">modules:</span><br><span class="line">    $(MAKE) -C $(KERNELDIR) M=$(PWD) modules</span><br><span class="line">clean:</span><br><span class="line">    rm -rf *.o *~ core .depend .*.cmd *.ko *.mod.c .tmp_versions modules.order Module.symvers</span><br></pre></td></tr></table></figure><p>之后make编译</p><p>但是在之后的安装设备驱动过程中一直遇到权限问题，查阅资料后发现要使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo chmod 777 /dev/rwbuf</span><br></pre></td></tr></table></figure><p>来修改设备文件的权限，<strong>这里只为实验目的才这么操作，在其他情况下除非必要，否则请绝对不要随意将文件权限设置为 <code>777</code>。</strong></p><p>接下来</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo insmod rwbuf.ko//安装驱动</span><br></pre></td></tr></table></figure><p>编写测试代码</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEVICE_NAME <span class="string">&quot;/dev/rwbuf&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RW_CLEAR 0x909090</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> fd;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="type">char</span> buff[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Open device %s...\n&quot;</span>, DEVICE_NAME);</span><br><span class="line">    fd = open(DEVICE_NAME, O_RDWR);</span><br><span class="line">    <span class="keyword">if</span> (fd == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Open device error\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nRead student id...&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (read(fd, buff, <span class="number">12</span>) &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        buff[<span class="number">11</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buff);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Failed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Write 1100 &#x27;a&#x27;...&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (write(fd, <span class="string">&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;</span>, <span class="number">1100</span>) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Failed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nRead from device...&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (read(fd, buff, <span class="number">1024</span>) &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        buff[<span class="number">1023</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buff);</span><br><span class="line">    &#125;![<span class="number">2</span>@WNF_MDG)&#125;X_ZHQ&#125;H08AK2](/home/dashuai/下载/<span class="number">2</span>@WNF_MDG)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Failed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nClear device...&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (ioctl(fd, RW_CLEAR) == <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Successful\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Failed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = close(fd);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Device closed\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行得到<img src alt="![img](file:////home/dashuai/.config/QQ/nt_qq_840d6ed4d60d3c2b17d252bef0c5f573/nt_data/Pic/2023-05/Ori/5136bc2bc6a05fadabcd29a62d035b0e.png)"></p><p>使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo rmmod rwbuf.ko</span><br></pre></td></tr></table></figure><p>卸载驱动</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;http://xxx/aplayer.min.css&quot;&gt;&lt;script src=&quot;http://xxx/aplayer.min.js&quot; clas</summary>
      
    
    
    
    <category term="实验" scheme="http://example.com/categories/%E5%AE%9E%E9%AA%8C/"/>
    
    <category term="操作系统上机" scheme="http://example.com/categories/%E5%AE%9E%E9%AA%8C/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%8A%E6%9C%BA/"/>
    
    
    <category term="那就学吧" scheme="http://example.com/tags/%E9%82%A3%E5%B0%B1%E5%AD%A6%E5%90%A7/"/>
    
  </entry>
  
  <entry>
    <title>第三篇博客</title>
    <link href="http://example.com/2023/05/02/%E7%AC%AC%E4%B8%89%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2023/05/02/%E7%AC%AC%E4%B8%89%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2023-05-02T08:04:19.000Z</published>
    <updated>2024-03-26T02:13:28.591Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><pre><code>今天本来想看看思维与智慧的，但是没有找到，只在b站上刷到了一句话。过一个平凡无趣的人生实在太容易了，你可以不读书，不冒险，不运动，不写作，不外出，不折腾。但是，人生最后悔的事情就是；我本可以。</code></pre><hr><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=2029752814&auto=1&height=66"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;http://xxx/aplayer.min.css&quot;&gt;&lt;script src=&quot;http://xxx/aplayer.min.js&quot; clas</summary>
      
    
    
    
    <category term="小纸条" scheme="http://example.com/categories/%E5%B0%8F%E7%BA%B8%E6%9D%A1/"/>
    
    <category term="博客" scheme="http://example.com/categories/%E5%B0%8F%E7%BA%B8%E6%9D%A1/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="闲谈" scheme="http://example.com/tags/%E9%97%B2%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>第二篇博客</title>
    <link href="http://example.com/2023/04/12/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2023/04/12/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2023-04-12T12:31:16.000Z</published>
    <updated>2024-03-26T02:13:38.362Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><h2 id="我的第二篇文章"><a href="#我的第二篇文章" class="headerlink" title="我的第二篇文章"></a>我的第二篇文章</h2><pre><code>没有人能够一直处于较好的位置，而真正厉害的人，总是知道如何在不同的处境下不断调整飞行姿态。今天拼了乐高，快好了。加油。</code></pre><hr><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1922120732&auto=1&height=66"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;http://xxx/aplayer.min.css&quot;&gt;&lt;script src=&quot;http://xxx/aplayer.min.js&quot; clas</summary>
      
    
    
    
    <category term="小纸条" scheme="http://example.com/categories/%E5%B0%8F%E7%BA%B8%E6%9D%A1/"/>
    
    <category term="博客" scheme="http://example.com/categories/%E5%B0%8F%E7%BA%B8%E6%9D%A1/%E5%8D%9A%E5%AE%A2/"/>
    
    
  </entry>
  
  <entry>
    <title>第一次接触(创建)Blog</title>
    <link href="http://example.com/2023/04/06/page/"/>
    <id>http://example.com/2023/04/06/page/</id>
    <published>2023-04-06T06:01:56.000Z</published>
    <updated>2024-03-26T02:15:10.583Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><h2 id="我的第一篇博客文章"><a href="#我的第一篇博客文章" class="headerlink" title="我的第一篇博客文章"></a>我的第一篇博客文章</h2><pre><code>希望我们所有人都能大步的向前迈进。刚分手也不知道说点啥。那就祝所有人，爱的，恨的，很爱的，很恨得人都能在世界得某个角落里安好吧。</code></pre><hr><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=2021132280&auto=1&height=66"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;http://xxx/aplayer.min.css&quot;&gt;&lt;script src=&quot;http://xxx/aplayer.min.js&quot; clas</summary>
      
    
    
    
    <category term="小纸条" scheme="http://example.com/categories/%E5%B0%8F%E7%BA%B8%E6%9D%A1/"/>
    
    <category term="博客" scheme="http://example.com/categories/%E5%B0%8F%E7%BA%B8%E6%9D%A1/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="开端" scheme="http://example.com/tags/%E5%BC%80%E7%AB%AF/"/>
    
  </entry>
  
</feed>
